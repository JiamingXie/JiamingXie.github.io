<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mentality</title>
  
  <subtitle>精诚所至，金石为开</subtitle>
  <link href="/JiamingXie.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/JiamingXie/"/>
  <updated>2018-12-08T11:35:31.286Z</updated>
  <id>https://github.com/JiamingXie/</id>
  
  <author>
    <name>Jiaming Xie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Graphic Programming</title>
    <link href="https://github.com/JiamingXie/2018/12/04/Graphic%20Programming/"/>
    <id>https://github.com/JiamingXie/2018/12/04/Graphic Programming/</id>
    <published>2018-12-04T00:23:48.000Z</published>
    <updated>2018-12-08T11:35:31.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introducing-GUI"><a href="#Introducing-GUI" class="headerlink" title="Introducing GUI"></a>Introducing GUI</h1><p>So far our program has been console program. Which runs in a command window. It did not know how to: </p><ul><li>Show or handle graphics</li><li>Process mouse events</li><li>Let user type in an window</li><li>Provide a list box, or a drop down</li><li>Give multiple choices with check boxes • Give single choice with radio buttons </li></ul><p>And many more using <u>Graphical User Interface</u> (GUI). It is about time. </p><p>Java provides multiple different ways to build solid GUI application (desktop application and applets as well). </p><p>One of the oldest way is by AWT (Abstract Window Toolkit).API Another way is using SwingAPI. </p><hr><p><strong>AWT (Advanced Window Toolkit)</strong>: is a java package which can be used in any Java program. </p><p><code>import java.awt.*;</code></p><p>It provides many classes to be used for different OS, or as applet in browser. Adequate for many applications. </p><p>It uses controls defined by your OS: it uses the lowest common denominator for portability. </p><p>It is lighter and faster. Good way to start learning GUI.</p><hr><p><strong>Swing</strong>: Similar concept as AWT. Newer than AWT. More controls to make richer GUI (JSlider, JColorChooser, JSpinner) </p><p><code>import javax.swing.*;</code></p><p>Many of the common controls are used in both: </p><p>AWT </p><p>Buttons Frames CheckBox Label </p><p>Swing </p><p>Jbuttons Jframes JCheckBox JLabel </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGraphics</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//A frame with "Title", "Minimize Bottom", "Maximize Bottom", "Close Bottom"</span></span><br><span class="line">    Frame newFrame = <span class="keyword">new</span> Frame(); </span><br><span class="line">    newFrame.setSize(<span class="number">550</span>, <span class="number">200</span>); </span><br><span class="line">    newFrame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><hr><p>Your application usually first displays something. So, you need a <strong>Frame</strong> or <strong>Dialog</strong> to display (e.g. text, image, input/output widgets – called <strong>components</strong>) You arrange these components using <strong>layout</strong>. </p><p>All these components interact with each other to solve your programming needs.<br>They listen to each other, so, you need to attach <strong>listeners</strong> to these components. </p><p>When an user interacts with these components an event is generated by OS and captured by listening components. </p><p><strong>Container</strong>:A container holds and displays </p><p><strong>Components</strong>. Examples of container include:  Panel,Window and Frame </p><p><strong>Component</strong>: Components are widgets you use to get input/output from users. Examples of component include:  Checkbox, Label, Scrollbar, Menu,TextField </p><p>*Remember that a <strong>Container</strong> is also a <strong>Component</strong>. This is a clever way to nest containers. </p><p><strong>Frame</strong>: A frame is a subclass of Container class. It has a title bar and a border around. </p><p>You can create multiple components and add to a container like Frame.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line"><span class="keyword">final</span> TextField textField = <span class="keyword">new</span> TextField(<span class="string">"Hello World"</span>); frame.add(textField);</span><br><span class="line">frame.setSize(<span class="number">550</span>, <span class="number">200</span>);</span><br><span class="line">frame.setVisible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>All <strong>container</strong> has common functionality – as they are derived from Component. </p><p>Container provides <strong>event-handling</strong> methods. </p><p>All containers have these <strong>functionalities</strong>: </p><p>add(Component) </p><p>remove(Component) </p><p>getComponents() </p><p>setLayout(LayoutManager) </p><p>getLayout() </p><p><strong>Layout Manager</strong>: Use a layout manager to arrange components inside a Container.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Frame content = <span class="keyword">new</span> Frame(<span class="string">"This is an introduction to graphics programming"</span>); </span><br><span class="line">content.setBackground(Color.CYAN);</span><br><span class="line">content.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">content.add(<span class="keyword">new</span> Label(<span class="string">"Day1:"</span>));</span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Monday"</span>)); </span><br><span class="line">content.add(<span class="keyword">new</span> Label(<span class="string">"Day2:"</span>)); </span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Tuesday"</span>)); </span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Wednesday"</span>));</span><br><span class="line">...</span><br><span class="line">content.add(<span class="keyword">new</span> Checkbox(<span class="string">"Check Me"</span>)); </span><br><span class="line">content.add(<span class="keyword">new</span> TextField(<span class="string">"Write Here"</span>, <span class="number">30</span>)); content.setSize(<span class="number">550</span>, <span class="number">200</span>); <span class="comment">// width, height</span></span><br><span class="line">content.setVisible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>LayoutManager</strong>: Is a abstract class, you must subclass it or use these derived classes (More Layout Managers): </p><ul><li><p><strong>BorderLayout</strong>: Arrange in North, East, Center,West, South direction (maximum five comonents) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">content.setLayout(<span class="keyword">new</span> BorderLayout()); </span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Monday"</span>), BorderLayout.NORTH); content.add(<span class="keyword">new</span> Button(<span class="string">"Tuesday"</span>), BorderLayout.WEST);</span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Wednesday"</span>), BorderLayout.CENTER); </span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Thursday"</span>), BorderLayout.EAST);</span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Friday"</span>), BorderLayout.SOUTH);</span><br></pre></td></tr></table></figure></li><li><p><strong>CardLayout</strong>: Like tabbed dialogs </p></li><li><p><strong>GridLayout</strong>:Arrange in grid of fixed size. Components are placed in left to right and top to down </p></li><li><p><strong>FlowLayout</strong>: Default frame layout. Arrange in a row and aligned, place on new line when needed </p></li></ul><h1 id="Event-Handling"><a href="#Event-Handling" class="headerlink" title="Event Handling"></a>Event Handling</h1><p>Java GUI and Windowing systems use the <strong>event-driven</strong> model to interact with the user. </p><p>OS is constantly polling for these events. When it finds one, it tells you the (program), what just happened. </p><p>You can chose not to care about that event, in that case, OS handles with default behavior, or you (your program) do something with that event – you can take it and ignore it as well. </p><p><strong>What are these events?</strong> </p><p>A window is closed, maximized, minimized </p><p>A mouse is moved, clicked or dragged</p><p>A button is clicked</p><p>A value is selected from list box </p><p>A radio button is pressed</p><p>A text is typed in a text box </p><p>All of these generates events and OS first grabs it and then sends to those components which generated it. </p><p><strong>How do you handle them in Java GUI?</strong> </p><p>Most components (button, textbox), already handle some events, e.g. button click, check mark display. </p><p>Components send the event and listeners listen for such event. Different components send different event </p><p>You can attach a listener to a component to associate an action with a component. </p><ul><li><strong>Window</strong>: Handle a window close event.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Frame content = <span class="keyword">new</span> Frame(<span class="string">"This is a frame"</span>);</span><br><span class="line">content.add(<span class="keyword">new</span> Button(<span class="string">"Monday"</span>), BorderLayout.NORTH); content.addWindowListener(</span><br><span class="line">    <span class="keyword">new</span> WindowAdapter()&#123;</span><br><span class="line">    <span class="comment">//add a listener</span></span><br><span class="line"><span class="comment">//inner anonymous class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">System.exit(<span class="number">0</span>); &#125;</span><br><span class="line">&#125; </span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>Window</strong>: Implement WindowListener and define the method windowClosing </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGraphics</span> <span class="keyword">extends</span> <span class="title">Frame</span> <span class="keyword">implements</span> <span class="title">WindowListener</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="title">TestGraphics</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">addWindowListener(<span class="keyword">this</span>); <span class="comment">// listen for events on this Window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123; </span><br><span class="line">    g.drawString(<span class="string">"Hello World"</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// define methods in WindowListener interface public void </span></span><br><span class="line">                                                         windowClosing(WindowEvent event) &#123; System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Button</strong>: You need a <code>ActionListener</code>, which must have a matching <code>actionPerformed(ActionEvent)</code> method </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">publicTestGraphics(String s) &#123;</span><br><span class="line">add(pushButton); </span><br><span class="line">    pushButton.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// define action for Button press</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event.getActionCommand().equals(<span class="string">"Click Me"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"ouch!"</span>);&#125;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>TextField</strong>: You need a <code>ActionListener</code> – waiting for enter key pressed, which must have a matching<code>actionPerformed(ActionEvent)</code> method. </p><p>A TextListner listens for any and all keys. This requires a textValueChanged method implemented </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TextField textfield = <span class="keyword">new</span> TextField(<span class="string">"Type something"</span>); </span><br><span class="line">textfield.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">textfield.setEditable(<span class="keyword">true</span>);</span><br><span class="line">textfield.addTextListener(<span class="keyword">new</span> TextListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textValueChanged</span><span class="params">(TextEvent e)</span></span>&#123; System.out.println(textfield.getText());</span><br><span class="line">&#125; </span><br><span class="line">&#125;);</span><br><span class="line">frame.add(textfield);</span><br><span class="line">frame.setSize(<span class="number">550</span>, <span class="number">200</span>); </span><br><span class="line">frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123; System.exit(<span class="number">0</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>Graphics</strong>: Use this abstract class for drawing<br>graphics.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drawString(str, x, y);</span><br><span class="line">drawRect(x1, y1, width, height);</span><br><span class="line">drawRoundRect(x1, y1, width, height, arcWidth,</span><br><span class="line">arcHeight);</span><br><span class="line">drawRect3D(x1, y1, width, height, raised);</span><br><span class="line">Image img = getImage(getDocumentBase(),“hello.gif”); g.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introducing-GUI&quot;&gt;&lt;a href=&quot;#Introducing-GUI&quot; class=&quot;headerlink&quot; title=&quot;Introducing GUI&quot;&gt;&lt;/a&gt;Introducing GUI&lt;/h1&gt;&lt;p&gt;So far our program
      
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Input/Output &amp; Collection</title>
    <link href="https://github.com/JiamingXie/2018/11/27/Input:Output%20&amp;%20Collection/"/>
    <id>https://github.com/JiamingXie/2018/11/27/Input:Output &amp; Collection/</id>
    <published>2018-11-27T00:37:33.000Z</published>
    <updated>2018-12-04T11:43:37.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-Handling-Advanced"><a href="#Exception-Handling-Advanced" class="headerlink" title="Exception Handling (Advanced)"></a>Exception Handling (Advanced)</h1><p>Java bundles the information regarding that exception in a class which are derived from <strong>Throwable</strong>, it then creates that object and throws to the offending methods which caused it.</p><p>Java allows ways to <strong>catch</strong> such exception object in your code to handle in graceful way or throw back to the method which called your method.</p><p>If you don’t do exception handling, then you need to consider all the exception conditions. Use <code>try</code> and <code>catch</code> to design your program.</p><p>All Java exceptions extends the class Throwable. Error and Exception are two subclasses of Throwable. </p><p>Error: You rarely do anything with Error as they are internal java resource error</p><p>Exception: You generally deal with Exception and its subclasses <code>RunTimeException</code> and <code>IOException</code>.</p><ul><li><p><code>RunTimeException</code> : Happens due to error in your code-array out of bounds, type mismatch etc.</p></li><li><p><code>IOException</code>: Out of your code. BAD URL or a file read.</p></li></ul><p>All exceptions derived from <code>Error</code> and <code>RunTimeException</code> are called <u>unchecked exceptions</u>.</p><p>All other exceptions like <code>IOException</code> are called <u>checked exceptions</u> and Java enforces you that you handle them in some way.</p><hr><p>Five keywords used in Java for exception:</p><p>try: block for offending code</p><p>catch: block to catch exception</p><p>throw: to throw exception manually. Java throws system generated exception automatically.</p><p>throws: use to describe a method which throws an exception out.</p><p>finally: block executed after try with our without catch.</p><hr><p><strong>checked exception</strong>: Strictly enforced by java. If a method throws checked exception then, you could:</p><ol><li>Either catch the exception and handle in some way, or</li><li>You can simply declare it using <strong>throws</strong> and let it pass through your method, or</li><li>You can map it to your own exception class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method-type method-name(parameters) <span class="keyword">throws</span> exception-list&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> method1&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    method2();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    method3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInput</span><span class="params">(Scanner in)</span> <span class="keyword">throws</span> NullPointerException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> userChoice=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(in==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Null Scanner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Please enter a value between 1 and 5"</span>);</span><br><span class="line">    userChoice=integer.parseInt(in.next());</span><br><span class="line">    <span class="keyword">return</span> userChoice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        getInput(inputReader);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">"Message:"</span> + e.getMessage());</span><br><span class="line">        System.out.println(<span class="string">"Stack Trace"</span>+ e.printStackTrace());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>You can only throw only those exceptions which you have declared in the <code>throws</code> clause of method declaration or the subclass of that exception.</li><li>If you cannot find a suitable exception class in the library, you can create your own exception.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//write your own exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOutOfRangeException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    MyOutOfRangeException(String message)&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInput</span><span class="params">(Scanner in)</span> <span class="keyword">throws</span> NullPointerException, MyOutOfRangeException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> userChoice=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(in==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Null Scanner"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Please enter a value between 1 and 5"</span>);</span><br><span class="line">    userChoice=integer.parseInt(in.next());</span><br><span class="line">    <span class="keyword">if</span>(userChoice&lt;<span class="number">1</span> || userChoice&gt;<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyOutOfRangeException(<span class="string">"Please enter a value between 1 and 5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userChoice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-Input-Output"><a href="#Java-Input-Output" class="headerlink" title="Java Input/Output"></a>Java Input/Output</h1><p>A lot is done for us by the API: <code>java.lang.package</code>. It contains three predefined <code>public static stream</code> variables, <strong>in, out, and err.</strong></p><p><strong>System.out</strong> and <strong>System.in</strong> refers to standard output(screen/console), and standard input(keyboard).</p><p>File Class: import it from java.io</p><p>Use this to work with the disk file in operating system. It has many useful methods which will allow you to work on a file.</p><ul><li>Find out if it exists using <code>exists</code> method</li><li>Find out if you can read or write using <code>canRead</code> , <code>canWrite</code></li><li>Delete the file using <code>delete</code></li><li>Find the size using <code>length</code></li><li>Find it’s full path with <code>getPath</code></li></ul><p>You typically use <strong>File</strong> class in conjuction with other classes.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File myFile = <span class="keyword">new</span> File(fileName);</span><br><span class="line"><span class="keyword">if</span>(myFile.exists())&#123;</span><br><span class="line">    System.out.println(<span class="string">"File name is:"</span> + myFile.getName());</span><br><span class="line">    System.out.println(<span class="string">"File is: "</span>+ myFile.getAbsolutePath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can use File class with Scanner just like you used System.in</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Scanner readInput;</span><br><span class="line"><span class="keyword">try</span>&#123;readInput = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(fileName));</span><br><span class="line">   <span class="keyword">while</span>(readInput.hasNextLine())</span><br><span class="line">   &#123;System.out.println(readInput.nextLine());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//start with most specific to most general exception</span></span><br><span class="line"><span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"File: "</span> +fileName + <span class="string">"not found"</span>);</span><br><span class="line">&#125;<span class="comment">//end catch</span></span><br><span class="line"><span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"Error Reading from file: "</span>+fileName +e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are many choices for I/O in JAVA. Java and most other I/O are stream-based. A <strong>stream</strong> is really a connection to a <em>source</em> of information or to a <em>destination</em> of information.</p><p>An input stream may be associated with a keyboard or a disk file, and an output stream may be associated with a screen or a disk file.</p><p>A program can have <strong>multiple streams</strong>: console, disk files, keyboard, sockets, memory, strings</p><p><strong>What do you do with stream?</strong> You first <strong>open</strong> the stream use the stream to read data sequentially, write or both, and then finally <strong>close</strong> them.</p><p>There are two types of streams in Java:</p><p>​    <strong>Byte</strong> streams to read/write binary data</p><p>​    <strong>Character</strong> streams to read/write Unicode characters</p><ul><li><p><strong>Byte stream</strong>: There are two abstract classes on top: <strong>InputSteam</strong> and <strong>OutputStream</strong>. There are many concrete classes which implements the behavior to read and write.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//How big is the file?</span></span><br><span class="line">InputStream inStream;</span><br><span class="line">inStream = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(inStream.read()!=-<span class="number">1</span>)</span><br><span class="line">    total++;</span><br><span class="line">System.out.println(total + <span class="string">"bytes"</span>);</span><br><span class="line">inStream.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>System.in</strong> , <strong>System.out</strong> and <strong>System.err</strong> are predefined byte stream.</p></li><li><p><strong>Character stream</strong>: There are two abstract classes on top: <strong>Reader</strong> and <strong>Writer</strong>. There are many concrete classes which implement the behavior to read and write.</p></li></ul><hr><p><strong>Text File I/O using Character Stream</strong>:</p><p><strong>Output</strong>: Use <strong>PrintWriter</strong>, <strong>FileWriter</strong>(FileOutputStream)</p><p><strong>Input</strong>: Use <strong>BufferedReader</strong>, <strong>FileReader</strong></p><p>You will use sets two of classes for easier reading and writing.</p><ul><li><p><strong>Buffered</strong> Reading/Writing: In most system including Java most of the time, the input/output streams are buffered before it is physically written into the disk file.</p><p>By doing this OS conserves the overhead, as accessing disk is inefficient compare with memory(RAM) access.</p></li><li><p><strong>Stream Names</strong>： Java needs to work with the <strong>OS</strong> while dealing with streams. [Your program connects to OS by JDK]</p><p>Every file has two names: <strong>input final.txt</strong> is what OS uses while <strong>inputStream</strong> is what Java uses.</p></li></ul><ul><li><p>Use stream which can be used for Input e.g. FileReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"filename"</span>);</span><br><span class="line"><span class="comment">//input OS filename</span></span><br></pre></td></tr></table></figure></li><li><p>“filename” name of OS file (store in your hard drive)</p></li><li><p>going forward your code will only use <strong>fileReader</strong></p></li><li><p><strong>FileReader</strong> provides a way to read an integer at a time.</p></li><li><p>If it goes to the last character of the text file, the xx.read() will be -1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fint readInput= ileReader.read();</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"input_final.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> readInput;</span><br><span class="line"><span class="keyword">while</span>((readInput=fileReader.read())!=-<span class="number">1</span>)</span><br><span class="line">    System.out.println(<span class="string">"Byte: "</span>+readInput+<span class="string">"\tChar:"</span> (<span class="keyword">char</span>)readInput);<span class="comment">//Change byte to ASCII code</span></span><br></pre></td></tr></table></figure><p>Reading from Input Stream: Using <strong>BufferedReader</strong></p><p>Use .readLine to read a line into a String (.read() for single char)</p><p>No methods to read numbers, so, use <strong>Tokenizer</strong> to parse String.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"input_final.txt"</span>);</span><br><span class="line">    BufferedReader finallnStream = <span class="keyword">new</span> BufferedReader(fileReader);</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">while</span>((s=finallnStream.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    finallnStream.close; <span class="comment">//remember to close it</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Reading from console(System.in)</strong>: Console provides byte of stream so, reading from Console, i.e. System.in requires you to <u>read characters</u>. (one at a time).</p><p>This will change the byte stream to character stream and read each individual character</p><p><code>InputStreamReader cReader=new InputStreamReader(System.in)</code></p><p>You need a BufferReader to read like tokens(individual unit)</p><p><code>BufferdReader tokenReader = new BufferedReader(cReader)</code></p><p>Read a line(token) : there are methods for word and char</p><p><code>String getLine = tokenReader.readLine();</code></p><p>You can parse numbers from these using parse methods of each type, i.e.</p><p><code>int myInt=Integer.parseInt(getLine);</code></p><p><strong>Writing to Console(System.out)</strong>: Good thing is System.out already defined to print numbers and strings.</p><p>System.in should be used with Scanner, but System.out can be used individually.</p><hr><p><strong>Tokenizer</strong>: Most of the time, reading a line is not what you want. However, you want to extract individual elements from it. For that Java provides tokenizer concept.</p><p>Use <code>StreamTokenizer</code> to read from a stream and <code>StringTokenizer</code> to extract the tokens from a string in your program.</p><p>Steps in using <code>StreamTokenizer</code>:</p><p>You need to first create a tokenizer and connect with <code>BufferedReader</code>. Then loop through to get first token, translate the token to your appropriate data and use it, and continue until there is no token left.</p><p>When you call the tokenizer method <code>nextToken</code>, it returns a flag about the next token:</p><p><strong>TT_EOF</strong>: indicates that the next token is the end of file</p><p><strong>TT_EOL</strong>: indicates the next token is the end of the line</p><p><strong>TT_WORD</strong>: indicates the next token is a word</p><p><strong>TT_NUMBER</strong>: indicates the next token is a number</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">StreamTokenizer myTokenizer = <span class="keyword">new</span> StreamTokenizer(bufferedReader);</span><br><span class="line"><span class="comment">//start to get next token</span></span><br><span class="line">nextToken = myTokenizer.nextToken();<span class="comment">//it returns a flag previously mentioned</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(nextToken!=StreamTokenizer.TT_EOF)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nextToken!=StreamTokenizer:TT_EOL &amp;&amp; nextToken == StreamTokenizer.TT_WORD)&#123;</span><br><span class="line">        strToken = myTokenizer.sval;<span class="comment">//used to parse the variable</span></span><br><span class="line">        System.out.println(<span class="string">"Found a string:"</span> + strToken);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nextToken!=StreamTokenizer.TT_EOL &amp;&amp; nextToken == StreamTokenizer.TT_NUMBER)&#123;</span><br><span class="line">        numberToken=myTokenizer.nval;</span><br><span class="line">        System.out.println(<span class="string">"Found a number: "</span>+ numberToken);</span><br><span class="line">    &#125;</span><br><span class="line">    nextToken = myTokenizer.nextToken();<span class="comment">//keep on going to the next one</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using <code>StringTokenizer</code>: StringTokenizer allows you to parse a string in different tokens. It has an easier way to specify delimiters - compared with <code>StreamTokenizer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String getLine = <span class="string">"This is, \n a string. with four delimeters"</span>;</span><br><span class="line"><span class="comment">//create a tokenizer with multiple delimiters</span></span><br><span class="line">StringTokenizer parseWords = <span class="keyword">new</span> StringTokenizer(getLine,<span class="string">"\n.,"</span>);</span><br><span class="line"><span class="keyword">while</span>(parseWords.hasMoreTokens())&#123;</span><br><span class="line">    System.out.println(parseWords.nextToken());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringTokenizer can also be used with console <strong>System.in</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scanner keyboard = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String getUserInput = keyboard.nextLine();</span><br><span class="line"><span class="comment">//create a tokenizer with multiple delimiters</span></span><br><span class="line">StringTokenizer parseUserInput = <span class="keyword">new</span> StringTokenizer(getUserInput,<span class="string">"\n.,"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(parseUserInput.hasMoreTokens())&#123;</span><br><span class="line">    System.out.println(parseUserInput.nextToken());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Output Using String</strong>: Similar to Input Stream. Here also we have two names: <code>outputStream</code> in the program and the physical file name used by OS: <code>output-final.txt</code></p><p>You typically connect a text file to a stream for writing: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream txtStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"f.txt"</span>);<span class="comment">//OS name</span></span><br><span class="line"></span><br><span class="line">PrintWriter textPrintStream = <span class="keyword">new</span> PritWriter(txtStream);</span><br></pre></td></tr></table></figure><p>Use println, print, format, flush, close of PrintWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter textPrintStream = <span class="keyword">null</span>;<span class="comment">//do this out of try and catch because you need to close it</span></span><br><span class="line">String outfileName = <span class="string">"output-final.txt"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    textPrintStream = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(outfileName));</span><br><span class="line">    textPrintStream.println(<span class="string">"This output will go to the file"</span> + outfileName);</span><br><span class="line">    textPrintStream.write(<span class="string">"This is Final Grade \n"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"Error opening the file"</span> + outfileName + <span class="string">"\n"</span> + e.getMessage());</span><br><span class="line">    System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">textPrintStream.close();</span><br><span class="line">System.out.println(outfileName + <span class="string">"been written and closed."</span>);</span><br></pre></td></tr></table></figure><h1 id="Collection-Generics"><a href="#Collection-Generics" class="headerlink" title="Collection/ Generics"></a>Collection/ Generics</h1><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p><strong>Java Data Structures:</strong> Java provides systematic way of organizing collections of data. </p><p><strong>Array</strong>: An array is a collection of objects in Java.Array name is reference to the actual object itself. </p><p><strong>Array of primitive data types:</strong> </p><p><code>int [] myIntArray = new int[4]; //is array of 4 integer</code></p><p><strong>Array of objects:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Box [] myBoxArray = <span class="keyword">new</span> Box[<span class="number">10</span>];</span><br><span class="line"><span class="comment">// is array of 10 Box objects – Java objects</span></span><br><span class="line">myBoxArray[<span class="number">0</span>] = <span class="keyword">new</span> Box(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myBoxArray[<span class="number">1</span>] = <span class="keyword">new</span> Box(<span class="number">5</span> <span class="number">10</span>);</span><br><span class="line">myBoxArray[<span class="number">1</span>] = <span class="keyword">new</span> Box(“I am fancy”);</span><br><span class="line">myBoxArray[<span class="number">1</span>] = <span class="keyword">new</span> Box(<span class="number">20</span>, <span class="number">30</span>,“I am fat and fancy”); </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Java provides an <strong>Array</strong> class which provides static methods to manipulate the array-for both primitive and ref. </p><ul><li>sort(): for sorting </li><li>binarySearch(): for efficient searching Java Arrays: </li></ul><p>Java Arrays:</p><ul><li>are type safe</li><li>simple implementation</li><li>easy to manipulate</li><li>good to store collection of primitive and references </li></ul><p>However, they are not most efficient: </p><ul><li>Size is constant </li><li>Inserting and deleting elements are costly </li></ul><p>Java provides even richer set of data structures to store <strong>collection</strong> of primitive data and references. </p><p>For example <strong>ArrayList</strong> class:A program written to use ArralyList collection would look like this: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList listOfValues = <span class="keyword">new</span> ArrayList(); listOfValues.add(<span class="string">"John"</span>); </span><br><span class="line">listOfValues.add(<span class="string">"Jack"</span>); </span><br><span class="line">listOfValues.add(<span class="string">"Jill"</span>); </span><br><span class="line">System.out.println(listOfValues); </span><br><span class="line">System.out.println(<span class="string">"3:"</span>+ listOfValues.get(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>It looks like array, however, it is much more flexible – as you notice <strong>the size grows dynamically.</strong> </p><p>Java provides a unified architecture for representing and manipulating collections through <em>collections framework</em>, which contains the following: </p><ul><li><strong>Interfaces</strong>: Abstract data types that represent collections. </li><li><strong>Implementations</strong>: Concrete implementations of the collection interfaces.</li><li><strong>Algorithms</strong>: Methods that perform useful computation like; searching and sorting which work on all implementations of collection interface in a polymorphic way. </li></ul><p><strong>Benefits of Java Collection Framework</strong>: </p><ul><li>Reduces your programming effort </li><li>Increases speed and quality of your program </li><li>Allows interoperability among unrelated APIs </li><li>Shorter learning curve</li><li>Shorter design time for new APIs</li><li>Fosters OOP by software reuse</li></ul><p><strong>Java Collection Interfaces</strong>: Primary means by which<br>collections are manipulated</p><ul><li>Collection: Just group of objects without any assumptions made about the order of the collection, or whether duplicates are allowed or not. </li><li>Set: No duplicate elements are permitted and may not be ordered </li><li>List: Ordered collection, duplicates are permitted </li><li>Map: Key value pair. Each key can only map to one value, no ordering </li><li>SortedSet: Elements are automatically sorted, either in their natural ordering or by a Comparator object</li><li>SortedMap: Mappings are automatically sorted by key, either in their natural ordering or by a Comparator object </li></ul><p>Methods Implemented with Collection Interface acts on individual elements:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> Object[] toArray();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object elem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br></pre></td></tr></table></figure><p>Methods Implemented with Collection Interface acts on bulk of elements:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection coll)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection coll)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection coll)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection coll)</span></span></span><br><span class="line"><span class="function"><span class="comment">//Removes from the collection all</span></span></span><br><span class="line"><span class="function"><span class="comment">//elements that are not elements of coll </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">//Remove all elements from this collection</span></span></span><br></pre></td></tr></table></figure><p>Java collection framework provides many Implementation (<strong>concrete</strong>) Classes, for example:</p><ul><li>ArrayList: Resizable-array implementation of the list interface.</li><li>LinkedList: Doubly-linked list implementation of the list interface. Better if frequent insertion and deletion is needed. </li><li>HashSet: Hash table implementation of the Set Interface. </li><li>TreeSet: Tree implementation of of SortedSet Interface. </li><li>HashMap: Hash map implementation of the Map interface. </li><li>TreeMap: Tree implementation of SortedMap Interface </li></ul><p>Using Collections: <strong>List</strong> </p><p>List is an <strong>ordered Collection</strong> which <strong>allows duplicate</strong> elements. Just like array, element index starts at 0.<br> <strong>List</strong> interface adds several methods for an ordered collection </p><p>Implementation:<br><strong>ArrayList</strong>: a resizable-array implementation. Simple to use.  Good for frequent scanning, but, not for frequent add/delete </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList listOfValues = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//or List listOfValues = new ArrayList(); </span></span><br><span class="line">listOfValues.add(<span class="string">"John"</span>); </span><br><span class="line">listOfValues.add(<span class="string">"Jack"</span>); </span><br><span class="line">listOfValues.add(<span class="string">"Jill"</span>); </span><br><span class="line">System.out.println(listOfValues);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"3: "</span> + listOfValues.get(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">listOfValues.add(<span class="keyword">new</span> NewBox(<span class="number">10</span>)); </span><br><span class="line">listOfValues.add(<span class="keyword">new</span> NewBox(<span class="number">20</span>)); </span><br><span class="line">listOfValues.add(<span class="keyword">new</span> NewBox(<span class="number">30</span>)); System.out.println(listOfValues);</span><br></pre></td></tr></table></figure><p><strong>LinkedList</strong>: Uses a doubly-linked list for storage. Not good for frequent scanning, however, good for frequent add/delete </p><p>LinkedList is a doubly linked list so you have more methods available as:</p><p>getFirst(), getLast(), removeFirst(), removeLast()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList linkedListValues = <span class="keyword">new</span> LinkedList();</span><br><span class="line">lnkedListValues.addFirst(<span class="string">"John"</span>); linkedListValues.addLast(<span class="string">"Jill"</span>); linkedListValues.addFirst(<span class="string">"Jack"</span>); linkedListValues.add(<span class="string">"Kerry"</span>); linkedListValues.addLast(<span class="string">"Sarah"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(linkedListValues)</span><br></pre></td></tr></table></figure><p><strong>Set</strong>: The Set interface extends the Collection interface.</p><ul><li>does not allow duplicates (contains no new methods) </li><li>Two Set objects are equal, if they contain same elements. </li><li>Null is a valid entry (only one null entry is allowed)</li><li>Objects added to Set, must have <strong>equals()</strong> defined </li></ul><p><strong>SortedSet</strong>: Extends Set. Elements are ordered in a specific order. <em>Natural order</em> implemented by <em>Comparable interface</em>. Change ordering by using a <em>Comparator</em> object. </p><p>Two general purpose implementation:</p><p><strong>HashSet</strong>: Stores its elements in a hash table and is fast.</p><p>Use it for duplicate free set. The objects stored in this set should implement hashCode() method-one is provided by Object may not be optimal. Objects are not physically sorted. </p><p><strong>Hash Function</strong>: Provide unique integers for each object. <u>Each hash integer must map to the same object</u>, and if two objects are equal (using equals method) then they must return same integer. </p><p><strong>TreeSet</strong>: Ordered set uses tree for storage. It allows elements to be added, or removed at any location by following an order.</p><p>Implements Set, provides an ordered set (uses tree for storage). Add/remove from any location, ordering is preserved.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object obj)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object obj)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>; </span><br><span class="line"><span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">Object[] toArray();</span><br></pre></td></tr></table></figure><p><strong>TreeSet</strong> allows you to defined your own sorting through an <strong>Comparator</strong> object passed during creation.</p><hr><p>Implement <strong>Comparable</strong> Interface: If you want to provide a natural ordering for your object. You must implement compareTo(Object o) method. This method should return a +ve, zero, -ve number if this object is less, equal or greater than the Object passed. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewBox</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123; <span class="comment">//compares area </span></span><br><span class="line"><span class="keyword">int</span> area1 = ((NewBox)o).height * ((NewBox)o).width; </span><br><span class="line">     <span class="keyword">int</span> area2 = height * width; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( area1 &lt; area2 ) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> ( area1 &gt; area2 ) <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NewBox box1 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 3"</span>, <span class="number">10</span>, <span class="number">20</span>); </span><br><span class="line">NewBox box2 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 4"</span>, <span class="number">20</span>, <span class="number">28</span>); </span><br><span class="line">NewBox box3 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 2"</span>, <span class="number">20</span>, <span class="number">20</span>); </span><br><span class="line">NewBox box4 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 1"</span>, <span class="number">25</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">NewBox[] lotsOfBoxes = <span class="keyword">new</span> NewBox[] &#123;box1, box2, box3, box4&#125;; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.length; i++)</span><br><span class="line">System.out.println(lotsOfBoxes[i].getBoxName());</span><br><span class="line"></span><br><span class="line">Arrays.sort(lotsOfBoxes); <span class="comment">//sort natually - provided by the object </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.length; i++)</span><br><span class="line">System.out.println(lotsOfBoxes[i].getBoxName() + <span class="string">" Area:"</span>+ lotsOfBoxes[i].getHeight() * lotsOfBoxes[i].getWidth());</span><br></pre></td></tr></table></figure><p>However, you may need better sorting, like alphabetical, then implement <strong>Comparator</strong></p><p>Using <strong>Comparator</strong> Interface: Implement this interface if you want to provide your own comparison.<br><strong>Comparator</strong> requires you to implement method: <strong>compare()</strong> and optionally <strong>equals()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareBoxNames</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object s1, Object s2)</span> </span>&#123; <span class="comment">//required </span></span><br><span class="line">String str1 = ((NewBox)s1).getBoxName();</span><br><span class="line">String str2 = ((NewBox)s2).getBoxName();</span><br><span class="line"><span class="keyword">return</span> (str1.compareTo(str2)) ; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object s1, Object s2)</span> </span>&#123; <span class="comment">//optional </span></span><br><span class="line">    String str1 = ((NewBox)s1).getBoxName();</span><br><span class="line">String str2 = ((NewBox)s2).getBoxName();</span><br><span class="line"><span class="keyword">return</span> (str1.equalsIgnoreCase(str2));</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p>Application:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NewBox box1 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 3"</span>, <span class="number">10</span>, <span class="number">20</span>); </span><br><span class="line">NewBox box2 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 4"</span>, <span class="number">20</span>, <span class="number">28</span>); </span><br><span class="line">NewBox box3 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 2"</span>, <span class="number">20</span>, <span class="number">20</span>); </span><br><span class="line">NewBox box4 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 1"</span>, <span class="number">25</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">NewBox[] lotsOfBoxes = <span class="keyword">new</span> NewBox[] &#123;box1, box2, box3, box4&#125;; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.length; i++)</span><br><span class="line">System.out.println(lotsOfBoxes[i].getBoxName());</span><br><span class="line"></span><br><span class="line">Arrays.sort(lotsOfBoxes, <span class="keyword">new</span> CompareBoxNames()); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.length; i++)</span><br><span class="line">    System.out.println(lotsOfBoxes[i].getBoxName());</span><br></pre></td></tr></table></figure><p>This can easily be used by other <strong>Collection</strong> objects as well:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Use with ArrayList</span></span><br><span class="line">NewBox box1 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 3"</span>, <span class="number">10</span>, <span class="number">20</span>); </span><br><span class="line">NewBox box2 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 4"</span>, <span class="number">20</span>, <span class="number">28</span>); </span><br><span class="line">NewBox box3 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 2"</span>, <span class="number">20</span>, <span class="number">20</span>); </span><br><span class="line">NewBox box4 = <span class="keyword">new</span> NewBox(<span class="string">"New Box 1"</span>, <span class="number">25</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">ArrayList lotsOfBoxes = <span class="keyword">new</span> ArrayList(); lotsOfBoxes.add(box1); </span><br><span class="line">lotsOfBoxes.add(box2); </span><br><span class="line">lotsOfBoxes.add(box3); </span><br><span class="line">lotsOfBoxes.add(box4);</span><br><span class="line">System.out.println(<span class="string">"In the order of creation:\n"</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.size(); i++) &#123; </span><br><span class="line">    NewBox nBox = (NewBox)lotsOfBoxes.get(i);</span><br><span class="line">    System.out.println(nBox.getBoxName()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extend to another collection:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Continued from previous code block</span></span><br><span class="line"><span class="comment">//sort natually - provided by the object </span></span><br><span class="line">System.out.println(<span class="string">"\nIn the order of natural sorting:\n"</span>);</span><br><span class="line">Collections.sort(lotsOfBoxes);<span class="comment">//sort by area</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.size(); i++) &#123;</span><br><span class="line">NewBox nBox = (NewBox)lotsOfBoxes.get(i);</span><br><span class="line">System.out.println(nBox.getBoxName() + <span class="string">" Area: "</span> + nBox.getHeight() * nBox.getWidth()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\nIn the order of Comparator sorting Implementation:\n"</span>); </span><br><span class="line">Collections.sort(lotsOfBoxes,<span class="keyword">new</span> CompareBoxNames());<span class="comment">//sort by name</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.size(); i++) &#123;</span><br><span class="line">NewBox nBox = (NewBox)lotsOfBoxes.get(i);</span><br><span class="line">System.out.println(nBox.getBoxName() + <span class="string">" Area: "</span> + nBox.getHeight() * nBox.getWidth());</span><br></pre></td></tr></table></figure><p><strong>Map Interface</strong>: Maps a key to the elements – instead of index </p><p><strong>HashMap</strong>: Implements Map interface, uses hash to get unique key value.</p><p><strong>SortedMap</strong> interface extends Map and maintains its keys in sorted order. </p><p><strong>TreeMap</strong>: Implements SortedMap, uses tree for storage and traversing efficiently. </p><p>Basic operations:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">put</span><span class="params">(Object key, Object value)</span></span>; </span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>TreeMap</strong>: TreeMap does not contain an iterator method. However, it contains Set <code>keySet()</code> method which is used to get the set of keys and then <u>iterate through it.</u> No ordering of the values, the tree is arranged according to he order of keys. </p><p><strong>TreeSet</strong>: TreeSet is more specific than TreeMap. TreeSet values are compared with each other, so, make sure to only put those which can be compared. Guaranteed to keep the elements in ascending order or through <strong>Comparator</strong>. </p><hr><p><strong>Iterator</strong>: Collection interface defines an <strong>iterator</strong> method which returns an object implementing the <strong>Interator</strong> interface </p><p><strong>Iterator</strong> is used to access elements of a collection, without exposing internal details. Order is not guaranteed </p><p>Iterator Interface: Defines these methods </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>Using <strong>Iterator</strong>: You can use iterator with any collection class which implements Iterator interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"\nUsing Iterator:\n"</span>); <span class="comment">//using</span></span><br><span class="line">Iterator it = lotsOfBoxes.iterator(); </span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">NewBox box = (NewBox)(it.next());</span><br><span class="line">System.out.println(box.getBoxName()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p>Enhanced <strong>for</strong> Loop: New syntax is more compact, and it is easier to use with collection:<br><strong>for</strong> (variable-type variable-name: range-of-values)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//enhanced for loop</span></span><br><span class="line"><span class="keyword">int</span> [] weeklyTemp = &#123;<span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">68</span>, <span class="number">66</span>, <span class="number">71</span>, <span class="number">70</span>&#125;;</span><br><span class="line"><span class="comment">//instead of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> day=<span class="number">0</span>; day &lt; weeklyTemp.length; day++)</span><br><span class="line">System.out.printf(<span class="string">"The temperature on day %d was %d\n"</span>, day+<span class="number">1</span>,</span><br><span class="line">weeklyTemp[day]);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//use this</span></span><br><span class="line"><span class="keyword">int</span> day=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> dayTemp : weeklyTemp)</span><br><span class="line">System.out.printf(<span class="string">"The temperature on day %d was %d\n"</span>, ++day, dayTemp); </span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p><strong>Introducing Generics</strong>: Generic allows generalized Types. <em>Generics</em> abstract over Types and provides readability and type safety during compile time </p><p>You can use generics with Methods, Classes and Interfaces as well </p><p>Use the “<strong>&lt;&gt;</strong>“ characters to designate the type to be used </p><p><strong>Generics Rationale</strong>: Suppose you needed to write a method to find out if an array contains a certain value (integer for example), then you would write like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Integer [] array, Integer intObject)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (Integer value : array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intObject.equals(value))</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//did not find it &#125;</span></span><br></pre></td></tr></table></figure><p>You will write the same function again for other objects, for example String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String [] array, String strObject)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">for</span> (String value : array) &#123;</span><br><span class="line"><span class="keyword">if</span> (strObject.equals(value)) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//did not find it </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now with <strong>generics</strong>, you need to write only one method, use an abstract type T:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T[] array,T anyObject)</span> </span>&#123; <span class="keyword">for</span> (T value : array) &#123;</span><br><span class="line"><span class="keyword">if</span> (anyObject.equals(value)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Integer[] array = <span class="keyword">new</span> Integer[<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123; array[j] =j * j; &#125;</span><br><span class="line"><span class="keyword">if</span> (contains(array, <span class="keyword">new</span> Integer(<span class="number">16</span>))) &#123; System.out.println(<span class="string">"Found the value"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Value not found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String[] strArray = <span class="keyword">new</span> String[<span class="number">5</span>]; </span><br><span class="line">String strTemp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">strTemp = String.format(<span class="string">"This is string %d"</span>, i*i); </span><br><span class="line">    strArray[i] = strTemp;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">if</span> (contains(strArray, <span class="keyword">new</span> String(<span class="string">"This is string 18"</span>))) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Found the value"</span>); &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Value not found"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Generics Types</strong>: All collection classes are re-written to accommodate Generics</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E x)</span></span>;</span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123; </span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"><span class="function">V <span class="title">put</span><span class="params">(K key,V Value)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Generics</strong>:Allows compile time type safety. Here is ArrayList example. This is true for rest of the collections as well.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Before:</span></span><br><span class="line">ArrayList lotsOfBoxes = <span class="keyword">new</span> ArrayList(); lotsOfBoxes.add(box1); <span class="comment">//add more boxes....</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.size(); i++) &#123;</span><br><span class="line">NewBox nBox = (NewBox)lotsOfBoxes.get(i); </span><br><span class="line">    System.out.println(nBox.getBoxName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//After:</span></span><br><span class="line">ArrayList&lt;NewBox&gt; lotsOfBoxes = <span class="keyword">new</span> ArrayList&lt;NewBox&gt;(); </span><br><span class="line"><span class="comment">//add more boxes ..</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lotsOfBoxes.size(); i++) &#123; </span><br><span class="line">    NewBox nBox = lotsOfBoxes.get(i);<span class="comment">//no casting</span></span><br><span class="line">System.out.println(nBox.getBoxName()); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-Handling-Advanced&quot;&gt;&lt;a href=&quot;#Exception-Handling-Advanced&quot; class=&quot;headerlink&quot; title=&quot;Exception Handling (Advanced)&quot;&gt;&lt;/a&gt;Exc
      
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Object Oriented Programming</title>
    <link href="https://github.com/JiamingXie/2018/11/12/Advanced%20Object%20Oriented%20Programming/"/>
    <id>https://github.com/JiamingXie/2018/11/12/Advanced Object Oriented Programming/</id>
    <published>2018-11-12T13:38:11.000Z</published>
    <updated>2018-11-23T12:06:13.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Encapsulation-amp-Access-Control"><a href="#Encapsulation-amp-Access-Control" class="headerlink" title="Encapsulation &amp; Access Control"></a>Encapsulation &amp; Access Control</h1><p>Hiding the internal state of an object is known as <em>data encapsulation</em>.</p><p>Field declaration can be preceded by different modifiers to provide different level of access to that field:</p><ul><li>Access control modifiers (public, private, protected and default/package)</li><li>Static</li><li>Final</li></ul><p>Access modifiers can be applied to field, method and even class</p><ul><li>Access Modifier: You can completely encapsulate a member (field or method) by using the <em>private</em> keyword. You can achieve a lesser degree of encapsulation by using the access modifiers <em>protected</em> or <em>public</em>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//everywhere class is accessible</span></span><br><span class="line">    <span class="keyword">int</span> hSize; <span class="comment">//default accessibility = package</span></span><br><span class="line">    <span class="keyword">int</span> vSize; <span class="comment">//also known as Package Friendly members</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">char</span> flChar; <span class="comment">//in subclasses as well, private to others [it is available to subclasses]</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//accessible only in the class[not available to subclass]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>static: There is only one copy of static variable exists to share among all objects of this class. That is why a static member can be accessed without an instance of a class. Also known as <strong>class variable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span> hSize;</span><br><span class="line">    <span class="comment">//I must use static method to get access to static variable</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="title">gethSize</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> hSize;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> String name=<span class="string">"I am a box"</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//outside world where the Box class is accessible</span></span><br><span class="line"><span class="keyword">int</span> horizontalSize = Box.gethSize();</span><br><span class="line">String boxName=Box.name;</span><br></pre></td></tr></table></figure><p>You don’t need an object to get that variable. You just need the class.</p></li><li><p>final: Many times you need a variable whose value should not be changed.</p><p>You can make:</p><ul><li>a reference</li><li>a method</li><li>a class</li><li>a vairable</li></ul><p>a final.</p><ul><li><p>Initializing final variable: Usually the final variables are initialized right where it is declared, however, you can differ that for run time - <strong>blank-final</strong>.</p><p>(you don’t need to assign the value when the variable is initialized.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hSize;</span><br><span class="line">    <span class="keyword">int</span> vSize;</span><br><span class="line">    </span><br><span class="line">    Box(<span class="keyword">int</span> h)&#123;</span><br><span class="line">        <span class="comment">//you want the user to decide what should be the value of the constant</span></span><br><span class="line">        hSize=h;</span><br><span class="line">        vSize=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SethSize</span><span class="params">(<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">        hSize=h;<span class="comment">//you cannot do this, because hSize has been set through the constructor.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Final and <strong><u>reference</u></strong> types:</p><p>If you make a reference as final then this reference can’t refer to any other references.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Box defaultBox= <span class="keyword">new</span> Box();</span><br><span class="line">Box bigBox=<span class="keyword">new</span> Box(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">defaultBox=bigBox; <span class="comment">//error- defaultBox is final</span></span><br><span class="line">bigBox=defaultBox;</span><br><span class="line"></span><br><span class="line">defaultBox.vSize=<span class="number">20</span>;<span class="comment">// OK; box reference is final, not members</span></span><br></pre></td></tr></table></figure></li><li><p>Final <u><strong>method</strong></u> arguments: You can have a method arguments which are final. A final method cannot be overridden in subclasses.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setvSize</span><span class="params">(<span class="keyword">final</span> Box b)</span></span>&#123;</span><br><span class="line">    b=<span class="keyword">new</span> Box(<span class="number">5</span>);<span class="comment">// error- b is final</span></span><br><span class="line">    b.vSize=<span class="number">20</span>; <span class="comment">//fine, b is final, the member of b is not final</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Final class: A final class can no longer be in herited to create subclasses. All methods of a final class is implicitly final.</p></li><li><p><code>this</code> keyword: Java has a concept of referring to itself (same object). You use <code>this</code> keyword in same object to refer itself. You can use them for:</p><ol><li><p>Resolving name conflict where the field name and method arguments are same.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hSize;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">sethSize</span><span class="params">(<span class="keyword">int</span> hSize)</span></span>&#123;</span><br><span class="line">        hSize=hSize; <span class="comment">//Error</span></span><br><span class="line">        <span class="keyword">this</span>.hSize=hSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>To pass reference to the current object as a parameter to other methods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hSize;</span><br><span class="line">    Box(<span class="keyword">int</span> hSize)&#123;</span><br><span class="line">        Box(<span class="keyword">this</span>);<span class="comment">//call another constructor</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Initializer in Jave: It is block of instructions which are performed right after the fields that are created and just beforet the constructors are called.</p><p>This is confusing though, so <strong>a constructor is a better way</strong> to initialize fields.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="comment">//you can initialize like this</span></span><br><span class="line">    <span class="keyword">int</span> h=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> w=<span class="number">20</span>;</span><br><span class="line">    String hC=<span class="string">"-"</span>;</span><br><span class="line">    String vC;</span><br><span class="line">    <span class="keyword">static</span> String boxName;</span><br><span class="line">    &#123;vC=<span class="string">"$"</span>;&#125;</span><br><span class="line">    <span class="comment">//static initializer</span></span><br><span class="line">    <span class="keyword">static</span> &#123;boxName= <span class="string">"Default Box"</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Method <em>overloading</em>: A class can have more than one method with the same name as long as they have different parameter list.</p><p>Compiler calls the right method by matching the name and parameter lists.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeDimension</span><span class="params">(<span class="keyword">char</span> vChar)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeDimension</span><span class="params">(<span class="keyword">char</span> vChar, <span class="keyword">int</span> vSize)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can also overload constructors as well.</p></li></ul></li></ul><p>Demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOPBox</span></span>&#123;</span><br><span class="line">    <span class="comment">//blank-final</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hSize;</span><br><span class="line">    <span class="keyword">int</span> vSize;</span><br><span class="line">    <span class="comment">//int height=10; //it can also be initialized in this way</span></span><br><span class="line">    <span class="comment">//int width=20;</span></span><br><span class="line">    String hChar=<span class="string">"*"</span>;</span><br><span class="line">    String vChar;</span><br><span class="line">    <span class="keyword">static</span> String boxName;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        vChar=<span class="string">"%"</span>; <span class="comment">//you can also initialize the variable by putting it in the block.</span></span><br><span class="line">        <span class="comment">//should be put before the constructor</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        boxName=<span class="string">"I am an OOPBOX."</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    OOPBox(<span class="keyword">int</span> h)&#123;<span class="comment">//this is the constructor</span></span><br><span class="line">        hSize=h;</span><br><span class="line">        vSize=<span class="number">10</span>; <span class="comment">//default value</span></span><br><span class="line">        <span class="comment">//initializer</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sethSize</span><span class="params">(<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">        hSize=h; <span class="comment">//error. because it has been already assigned in OOPBox before</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> OOPBox defaultBox= <span class="keyword">new</span> OOPBox(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//set defaultBox as final</span></span><br><span class="line">        OOPBox bigBox = <span class="keyword">new</span> OOPBox(<span class="number">5</span>);</span><br><span class="line">        OOPBox smallBox;</span><br><span class="line">        smallBox = defaultBox;<span class="comment">//OK</span></span><br><span class="line">        defaultBox = smallBox; <span class="comment">//Error. defaultBox is final</span></span><br><span class="line">        defaultBox.vSize=<span class="number">20</span>; <span class="comment">//OK. coz vSize is not final</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Override and Overload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Superclass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Box</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawYourself</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//default</span></span><br><span class="line">        drawhLine(hSize,hString);</span><br><span class="line">        System.out.printf(<span class="string">"\n"</span>);</span><br><span class="line">        drawvLine(hSize,vSize,fillerStr,vStr);</span><br><span class="line">        drawhLine(hSize, hStr);</span><br><span class="line">        System.out.printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//subclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyBox</span> <span class="keyword">extends</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawYourself</span><span class="params">(<span class="keyword">int</span> howBig)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.sethSize(<span class="keyword">super</span>.gethSize()*howBig);</span><br><span class="line">            <span class="keyword">super</span>.setvSize(<span class="keyword">super</span>.getvSize()*howBig);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">super</span>.drawYourself();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Override drawYourself</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> drawYourself&#123;</span><br><span class="line">            drawhLine(<span class="keyword">super</span>.gethSize(),<span class="keyword">super</span>.gethStr());</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">         drawvLine(<span class="keyword">super</span>.gethSize(),<span class="keyword">super</span>.gethSize(),<span class="keyword">super</span>.getFillerStr(),<span class="keyword">super</span>.getvStr());</span><br><span class="line">            drawHLine(<span class="keyword">super</span>.gethSize,<span class="keyword">super</span>.gethStr());</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Overload - Same method name but different parameters</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">()</span></span>&#123;<span class="comment">//default constructor must be offered</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">(<span class="keyword">int</span> hSize, <span class="keyword">int</span> vSize, String hStr, String vStr, String fillerStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(hSize,vSize,hStr,vStr,fillerStr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">(<span class="keyword">int</span> h,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(h,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><p>One of the advantage of OOP is code re-use</p><p>Java allows multiple ways for you to re-use already developed and time tested class in your own code.</p><ul><li>By way of <strong>composition</strong>: Embed one class into another.</li><li><p>Another way is through <strong>inheritance</strong>. Here one class inherits all the properties of another class.</p></li><li><p>Composition defines ‘<strong>has-a</strong>‘ relationship.</p><ul><li>When you add a reference to another class you are already using the composition.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    String name;<span class="comment">//this class use string class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here Box ‘has-a’ String, so we are already using composition relationship.</p></li><li><p>Inheritance defines ‘<strong>is-a</strong>‘ relationship.</p><ul><li>Process of inheriting state and behavior from another class</li><li>Every class in java has one and only one parent</li><li>Only object class has no parent</li><li>if you don’t derive a class from another, it is implicitly derived from java.lang.Object class</li><li>You can have a chain of derivations</li></ul></li></ul><p>What is a <strong>Subclass</strong>？</p><p>Sub-class can be thought of as a class which also contains(like in composition) the superclass.</p><p>During the creation of Fancy Box, a Box of object needs to be created as well, and Box needs to be created first.</p><p>Use keyword <code>extends</code> to derive one class from another.</p><ul><li>Inheritance is always public, there is no access modifier for it.</li><li>You can access base class functionality by using <code>super</code> keyword.</li><li>Derived class can call the base class constructors by using <code>super</code> keyword (it has to be first instruction.)</li><li>You have to call base constructor which exists if the base class does not have an empty constructor.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span></span>&#123;&#125;;<span class="comment">//you must define this, or super(); will fail in subclass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(<span class="keyword">int</span> hSize,...)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyBox</span> <span class="keyword">extends</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//it calls Box()&#123;&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Abstract-Class"><a href="#Abstract-Class" class="headerlink" title="Abstract Class"></a>Abstract Class</h1><p>Abstraction: It is the modeling, representation of an element of the problem domain in a program.</p><p>Abstraction is the process of identifying and grouping attributes and behavior of an entity.</p><p>Allows architect to focus on <strong>important attributes</strong>.</p><p><strong><u>Abstract method</u></strong>: Java allows you to declare an object without defining it first:</p><p><code>Box b;</code></p><p>Similarly java allows you to declare a method without really defining it - meaning without body</p><p><code>public abstract void draw();//missing{}</code></p><p><code>draw</code> is called abstract method.</p><p><u><strong>Abstract class</strong></u>: A class which has at least one abstract method is called an abstract class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">myBox</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHight</span><span class="params">(<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">        hHeight=h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// we want this method to be implemented by a concrete class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Abstract class provides an empty class, with empty behaviors and kind of enforce that this class can <strong><u>only be used for inheritance</u></strong> and <u>not for instantiating</u> any objects as this <u>object can’t do anything</u>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Complete."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Shape myShape = <span class="keyword">new</span> Shape(); <span class="comment">// it is not allowed</span></span><br><span class="line">Shape yourShape = <span class="keyword">new</span> Box();<span class="comment">//this is allowed. </span></span><br><span class="line"><span class="comment">//You can assign the reference, but not create it.</span></span><br><span class="line"></span><br><span class="line">String strName=yourShape.getName();</span><br><span class="line">Box defaultBox = <span class="keyword">new</span> Box(); <span class="comment">//you can create Box class</span></span><br></pre></td></tr></table></figure><h1 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h1><p>A Problem: At times during design you will run into a situation where you wish you could provide a uniform functionality across different classes, which may not be directly related by inheritance.</p><p>Java does not allow inheritance from multiple classes, so they provide <strong>interface</strong> mechanism which comes very close to multiple inheritance.</p><p>Interface is really a promise to outside world to guarantee a certain behavior by a class which will implement this interface, a contract.</p><p>While there are differences, however, <strong>interface</strong> is very much look like <strong>abstract class</strong>.</p><p>You declare an interface using a keyword <code>interface</code>, give it a name and its members. Interface can have three types of members:</p><ul><li>Constant fields</li><li>Methods</li><li>Nested classes and interfaces</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IShape</span></span>&#123;<span class="comment">//put I here to say it is an interface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>; <span class="comment">//it contains method signatures without body</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFillCharacter</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="comment">//all methods are abstract, so no need to specify abstract</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interface can have only named constants, <code>public</code>, <code>static</code>, <code>final</code>. It can have <strong>only abstract methods</strong>, however all these modifiers are omitted by convention.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDog</span></span>&#123;<span class="comment">//implicitly abstract. can have a public/package/(default) modifier</span></span><br><span class="line">    <span class="keyword">int</span> LIFE_EXPECTANCY =<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> MAX_SPEED =<span class="number">30</span>;<span class="comment">//implicitly public, void and final</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">()</span></span>;<span class="comment">//methods are implicitly abstract and public</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wagTail</span><span class="params">()</span></span>;<span class="comment">//they cannot be final or static</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>You cannot instantiate an interface</li><li>interface is implemented by a class or extended by another interface</li><li>a concrete class implements all the interfaces. <strong>Abstract class</strong> can implement part of the methods. Ultimately all methods need to be implemented in the hierarchy of derivation chain.</li><li>Interface allows classes to implement certain behavior irrespective of their locations in the class hierarchy.</li><li>One class can implement several interfaces, providing a way for multiple inheritance.</li></ul><p>A class implements an interface by providing concrete methods；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">IDog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"Fetch"</span>);&#125;<span class="comment">//concrete methods</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wagTail</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"Wag Tail"</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want to <strong><u>implement multiple interface</u></strong>:</p><p>You can write a concrete class which can extend one super class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">IDog</span>, <span class="title">IAnimal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String breed;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Walk."</span>);&#125;<span class="comment">//Dog and Animal</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fetch"</span>);&#125;<span class="comment">//Dog</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wagTail</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"Wag tail"</span>);&#125;<span class="comment">//Dog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just like classes, <strong><u>interfaces can be inherited also</u></strong> and can have hierarchy, even though interface is not party of class hierarchy.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IK9</span> <span class="keyword">extends</span> <span class="title">IDog</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> SERVICE_LIFE =<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> TOP_SPEED=<span class="number">40</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findPeople</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interface Releases(how do you version it?): Once the interfaces are made public, any changes made in the interface itself will break the original contract.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDog</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> LIFE_EXPECTANCY =<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> MAX_SPEED=<span class="number">30</span>;</span><br><span class="line">    <span class="comment">//methods are implicitly abstract and public</span></span><br><span class="line">    <span class="comment">//they can't be final or static</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fetch</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wagTail</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span>;<span class="comment">//will break all callers using IDog before</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can always write a new interface by extending the old one. This will allow the old code work just fine, and whoever has knowledge of new interface will implement the newer version.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INewDog</span> <span class="keyword">extends</span> <span class="title">IDog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You cannot instantiate an object from an interface. When you define a reference variable of interface type, they must be assigned to <strong>an object of the class that implemented that interface</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IBox iP4 = <span class="keyword">new</span> IBox(); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p><code>instanceof</code> operator: Allows you to find out if a reference is a type of particular interface or a class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">K9</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">INewDog</span>, <span class="title">IK9</span></span>&#123;...&#125;</span><br><span class="line">Dog myLab = <span class="keyword">new</span> K9();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Then all these followings are going to be true:</span></span><br><span class="line">myLab instance of Dog</span><br><span class="line">myLab instance of K9</span><br><span class="line">myLab instance of INewDo</span><br><span class="line">myLab instance of IK9</span><br></pre></td></tr></table></figure><p>The use of <code>instanceof</code> is not really recommended. You may be able to improve your design.</p><p>Advantages of Interface:</p><ul><li>used for encapsulation/flexibilities</li><li>Allows implementation changes without affecting the caller</li><li>Unrelated classes can implement similar behavior</li><li>Allows multiple inheritances</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Encapsulation-amp-Access-Control&quot;&gt;&lt;a href=&quot;#Encapsulation-amp-Access-Control&quot; class=&quot;headerlink&quot; title=&quot;Encapsulation &amp;amp; Access C
      
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Class, Exceptions, Scope</title>
    <link href="https://github.com/JiamingXie/2018/10/23/Class,%20Exceptions,%20Scope/"/>
    <id>https://github.com/JiamingXie/2018/10/23/Class, Exceptions, Scope/</id>
    <published>2018-10-23T14:45:34.000Z</published>
    <updated>2018-11-12T13:36:13.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> myAge=<span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>Literally myAge is an object whose state is value 12. The behavior of myAge can be “add”, “substract”, “compare”, etc.</p><p>Concept of objects are applied to new type of objects created by programmers where built in objects (data types) are not sufficient to solve the need.</p><ul><li>Users have requirements</li><li>Identify <strong>nouns</strong> to make up the class<ul><li>Verb/adj make up <u>behavior</u> and <u>state</u></li></ul></li><li>Organize classes to solve users’ requirement</li></ul><p>Object’s state is stored in <strong><em>fields</em></strong>(variables)</p><p>it could be primitive data type or another object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">10</span>;</span><br><span class="line">    String hLineSymbol= <span class="string">"-"</span>;</span><br><span class="line">    String vLineSymbol= <span class="string">"|"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object’s behavior is defined by methods(functions)</p><p>it operates on internal state. Hides details.</p><p>Providing OOP Encapsulation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeHLSymbol</span><span class="params">(String hLine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hLineSymbol=hLine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeVLSymbol</span><span class="params">(String vLine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vLineSymbol=vLine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="comment">//state</span></span><br><span class="line">    <span class="keyword">int</span> hSize=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> vSize=<span class="number">20</span>;</span><br><span class="line">    String hChar=<span class="string">"-"</span>;</span><br><span class="line">    String vChar=<span class="string">"|"</span>;</span><br><span class="line">    String fillerStr = <span class="string">" "</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//behavior</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawHLine</span><span class="params">(<span class="keyword">int</span> h, String hStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++&lt;h)</span><br><span class="line">            System.out.print(hStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawVLine</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v, String hStr, String vStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++&lt;v-<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.print(vStr);</span><br><span class="line">            drawHLine(h-<span class="number">2</span>,hStr);</span><br><span class="line">            System.out.println(vStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawYourself</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//default box</span></span><br><span class="line">        drawHLine(hSize, hStr);</span><br><span class="line">        System.out.printf(<span class="string">"\n"</span>);</span><br><span class="line">        drawVLine(hSize,vSize,fillerStr,vStr);</span><br><span class="line">        drawHLine(hSize,hStr);</span><br><span class="line">        System.out.printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box defaultBox= <span class="keyword">new</span> Box();</span><br><span class="line">defaultBox.drawYourself();</span><br></pre></td></tr></table></figure><hr><ul><li>Restrict access to data within class</li><li>Use visibility modifiers in methods for accessbility to clients (of class)</li><li>Pass data to/from methods as parameters</li><li>Create instance variables for class, built in types and use locally or pass as parameters</li><li>Create helper methods as utility</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//private: you can change it without the user knowing about it</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//state by variable names</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trimHeight</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//hide your state and behavior</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeHeight</span><span class="params">()</span></span>&#123;<span class="number">40</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//behavior by methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class is a template to create an object.</p><hr><p>Object: A BIG BOX or a small box is an instance(object) of a Box blue print(class)</p><p>Object is run time entity consisting of data(state) and responds to messages (behavior)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyUtility.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstJavaHello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(..)</span></span>&#123;</span><br><span class="line">        Box bigBox = <span class="keyword">new</span> Box();</span><br><span class="line">        bigBox.drawBox();</span><br><span class="line">        <span class="comment">//bigBox is an object and you apply the behavior "drawBox" to it</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An object is an instance of its class(blue print), and the process of creating a new object is called <strong>instantiation</strong>.</p><p>bigBox is <strong>instantiated</strong> from Box class</p><p><strong>new</strong> operator is used to instantiate a new object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Box bBox, sBox;<span class="comment">//declare variable</span></span><br><span class="line"><span class="comment">//create a part of memory for the object</span></span><br><span class="line">bBox = <span class="keyword">new</span> Box(); <span class="comment">//instantiate</span></span><br><span class="line">bBox.drawBox(); <span class="comment">//use</span></span><br></pre></td></tr></table></figure><p>bBox is a reference to an box object(bBox is an interface not real object – which is in memory).</p><p>A box object keeps track of height and width.</p><ul><li><p>What is the value of height and width of new object? </p><p>Use <strong>accessor</strong> methods!</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bBox.findHeight();</span><br><span class="line">bBox.findWidth();</span><br><span class="line">bBox.findVLSymbol();</span><br><span class="line">bBox.findHLSymbol();</span><br></pre></td></tr></table></figure><ul><li><p>How do you change these values?</p><p>Use <strong>mutator</strong> methods!</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bBox.changeHeight(<span class="number">8</span>);</span><br><span class="line">bBox.changeWidth(<span class="number">8</span>);</span><br><span class="line">bBox.changeHLineSymbol(<span class="string">"*"</span>);</span><br><span class="line">bBox.changeVLineSymbol(<span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><ul><li>Always write a special method called: toString as well<ul><li>It is a good habit.</li><li>Every time you want to dump your output, use this method.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toSting</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\nName: "</span>+boxName +</span><br><span class="line">        <span class="string">"\nHeight:"</span> + height+</span><br><span class="line">        <span class="string">"\nWidth: "</span>+width+</span><br><span class="line">        <span class="string">"\nH Line Symbol: "</span>+hLineSymbol+</span><br><span class="line">        <span class="string">"\nV Line Symbol: "</span>+vLineSymbol+</span><br><span class="line">        <span class="string">"\n\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can directly call the <strong>toString</strong> method for that object.</p><p>However, there are other situations where the method <strong>toString</strong> is implicitly called.</p><p>For instance:</p><ul><li>toString is called implicitly when a Box object is concatenated with a string.</li><li>toString is called when Box object is in an argument to the method println</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String str;</span><br><span class="line">str = <span class="string">"This is Johns Big Box: \n"</span> + bigBox.toString();</span><br><span class="line"><span class="comment">//this is equivalent</span></span><br><span class="line">str = <span class="string">"This is Johns Big Box: \n"</span> +bigBox;</span><br><span class="line"></span><br><span class="line">System.out.println(smallBox.toString());</span><br><span class="line"><span class="comment">//this is equivalent to</span></span><br><span class="line">System.out.println(bigBox);<span class="comment">//you can directly print</span></span><br></pre></td></tr></table></figure><ul><li><p>Combining state and behavior in a single software entity is called <strong>Encapsulation</strong></p><ul><li>Objects have <strong>behavior</strong> defined by methods</li><li>Objects have <strong>state</strong> because at any moment instance variable has values in them</li><li>Each object has unique ID handled internally</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="comment">//if you don't want others to know how you draw the box, you can add 'private'</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width = <span class="number">20</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> String vLineSymbol = <span class="string">"|"</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeHLSymbol</span><span class="params">(String hLine)</span></span>&#123;&#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>JVM(java virtual machine), Computer Memory and Your Program:</strong></p><p>Memory holds:</p><p>​    compiled class templates(always)</p><p>​    variables that refer objects and object themselves ( come and go)</p><ul><li>in first instantiation, disappears when not needed</li></ul><p>JVM keeps track of <strong>object references</strong></p><p>Unreferenced objects are deleted via <strong>garbage collection</strong></p><p>Primitive Types, Reference Types and the nullValue:</p><p>In java there are two fundamental types:</p><ul><li><p><strong>Primitive types</strong>: byte, char, int, double, boolean etc. (box that contains a value of that primitive type)</p></li><li><p><strong>Reference types</strong>: all classes, for instance, String, Student,… (a box that contains a pointer to an object)</p><p>Reference variables can be assigned the value null which will eventually be garbage collected.</p></li></ul><p>Two or more variables can refer to the same object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Box bigBox, smallBox;</span><br><span class="line">bigBox = <span class="keyword">new</span> Box();<span class="comment">//the reference is copied to bigBox</span></span><br><span class="line"></span><br><span class="line">smallBox = bigBox;</span><br><span class="line"><span class="comment">//bigBox and smallBox are pointing to the same place.</span></span><br><span class="line">System.out.println(bigBox);</span><br><span class="line">System.out.println(smallBox);</span><br><span class="line"></span><br><span class="line"><span class="comment">//you can break the connection by assigning null to it</span></span><br><span class="line">smallBox=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//you can only assign null to objects but not primitive variables</span></span><br><span class="line"><span class="comment">//int i=null; //cannot be done</span></span><br></pre></td></tr></table></figure><p>Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="comment">//state</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hSize=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vSize=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> String hChar=<span class="string">"-"</span>;</span><br><span class="line">    <span class="keyword">private</span> String vChar=<span class="string">"|"</span>;</span><br><span class="line">    <span class="keyword">private</span> String fillerStr = <span class="string">" "</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//behavior</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHLine</span><span class="params">(<span class="keyword">int</span> h, String hStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++&lt;h)</span><br><span class="line">            System.out.print(hStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawVLine</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v, String hStr, String vStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++&lt;v-<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.print(vStr);</span><br><span class="line">            drawHLine(h-<span class="number">2</span>,hStr);</span><br><span class="line">            System.out.println(vStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawYourself</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//default box</span></span><br><span class="line">        drawHLine(hSize, hStr);</span><br><span class="line">        System.out.printf(<span class="string">"\n"</span>);</span><br><span class="line">        drawVLine(hSize,vSize,fillerStr,vStr);</span><br><span class="line">        drawHLine(hSize,hStr);</span><br><span class="line">        System.out.printf(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need to provide a public mutator or accessor.</p><p><code>source</code> -&gt; <code>Generate Getters and Setters...</code></p><p>Eclipse can automatically create the methods for you.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//accessor method</span></span><br><span class="line"><span class="comment">//get the parameter</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gethSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mutator method</span></span><br><span class="line"><span class="comment">//change the parameter</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sethSize</span><span class="params">(<span class="keyword">int</span> hSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hSize = hSize;</span><br><span class="line">    <span class="comment">//'this' means the hSize represents the hSize for this class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Box defaultBox = <span class="keyword">new</span> Box();</span><br><span class="line"><span class="comment">//Box() means you are calling a constructor.</span></span><br><span class="line"><span class="comment">//It's name is the same as the class</span></span><br><span class="line">defaultBox.drawYourself();</span><br><span class="line"></span><br><span class="line"><span class="comment">//How to create a constructor?</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(<span class="keyword">int</span> hSize, <span class="keyword">int</span> vSize, String hStr, String vStr, String fillerStr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.hSize=hSize;</span><br><span class="line">    <span class="keyword">this</span>.vSize=vSize;</span><br><span class="line">    <span class="keyword">this</span>.hStr=hStr;</span><br><span class="line">    <span class="keyword">this</span>.vStr=vStr;</span><br><span class="line">    <span class="keyword">this</span>.fillerStr=fillerStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Then you can directly set the parameters</span></span><br><span class="line">Box smallBox= <span class="keyword">new</span> Box(<span class="number">25</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Box bigBox= <span class="keyword">new</span> Box(<span class="number">30</span>,<span class="number">15</span>,<span class="string">"&amp;"</span>,<span class="string">"+"</span>,<span class="string">"#"</span>);</span><br><span class="line">bigBox.drawYourself();</span><br></pre></td></tr></table></figure><p>Eclipse can help you generate the constructor</p><p><code>Source</code> -&gt; <code>Generate Constructor using Fields...</code></p><h1 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h1><ul><li>Syntax errors: compiler will report this error</li><li>Semantic error: logical error - compiler has no clue</li><li>Runtime errors: logical error which crashes your program<ul><li>Divide by zero</li><li>Subscript out of range for arrays</li><li>Stuffing wrong data type</li><li>Calling a function on null object</li><li>…</li></ul></li></ul><p>How can you fix it?</p><ul><li>Syntax errors: With help of compiler and document</li><li>Logical errors: by debugging and not doing sloppy programming</li><li>Runtime errors by using <u>exception handling</u></li></ul><h2 id="Errors-in-Java"><a href="#Errors-in-Java" class="headerlink" title="Errors in Java"></a>Errors in Java</h2><p>Use the function which checks error for us:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Box bigBox, smallBox;</span><br><span class="line">bigBox = <span class="keyword">new</span> Box();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> boxSize = getValidInteger();</span><br><span class="line">bigBox.ChangeHeight(boxSize);</span><br><span class="line"></span><br><span class="line">bigBox.changeWidth(getValidInteger());</span><br></pre></td></tr></table></figure><h2 id="Exceptions-in-Java"><a href="#Exceptions-in-Java" class="headerlink" title="Exceptions in Java"></a>Exceptions in Java</h2><p>When you program crashes for some situation which JVM doesn’t know how to handle, JVM will create a special object called <u><strong>exception</strong> and throw</u>.</p><p>As a programmer, it is up to you to catch that exception object and handle the situation relatively gracefully.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">smallBox= <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    smallBox.drawBox();</span><br><span class="line">    <span class="comment">//try block. Trying to do something which could go wrong</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="comment">//control is transferred here if any exception is raised in try block</span></span><br><span class="line">    System.out.println(<span class="string">"Something wrong with drawing smallbox: "</span>+ e);<span class="comment">//you can have many catch block</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line">...;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    tempArray[day]=getInput.nextInt();</span><br><span class="line">&#125;<span class="keyword">catch</span>(InputMismatchException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"Problem reading your input: "</span>+ e.getMessage());<span class="comment">//Print your error(here is "Null")</span></span><br><span class="line">    getInput.next(); <span class="comment">//gobble up the old input stream</span></span><br><span class="line">    <span class="comment">//The scanner will start from the next variable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want to re-enter after typing a wrong input, then you should add a loop outside:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">for</span>(day=<span class="number">0</span>;day&lt;tempArray.length;day++)&#123;</span><br><span class="line">    System.out.printf(<span class="string">"Enter the temp: "</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    tempArray[day]=getInput.nextInt();</span><br><span class="line">&#125;<span class="keyword">catch</span>(InputMismatchException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"Problem reading your input: "</span>+ e.getMessage() + <span class="string">". Please re-enter: "</span>);</span><br><span class="line">    getInput.next(); </span><br><span class="line">    day--; <span class="comment">//reset the day so that you can re-enter the temperature</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Scope-and-life-time-of-variables"><a href="#Scope-and-life-time-of-variables" class="headerlink" title="Scope and life time of variables"></a>Scope and life time of variables</h1><h2 id="Class-Construct"><a href="#Class-Construct" class="headerlink" title="Class Construct"></a>Class Construct</h2><p>Most classes have similar constructs</p><ul><li>A name with some modifiers</li><li>Some instance variables</li><li>One or more method describing how to initialize the object (Constructors - method)</li><li>A constructor is a special method with the same name as the class</li><li>More methods which signifies how your object responds to messages</li><li>Constructor is called when you use <strong>new</strong> operator</li><li>Used for initializing the state of newly instantiated object</li><li>Can have multiple constructors</li><li><strong>Default Constructor</strong> has empty body</li><li>If you don’t provide, JVM provides one Default Constructor</li><li>If you have multiple constructor, you can chain them</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width =<span class="number">20</span>;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, String hLine, String vLine, String boxName)</span></span>&#123;&#125;;</span><br><span class="line">    ...;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHoriontalLine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBox</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class has two main parts:</p><ul><li>Instance variables</li><li>Methods</li></ul><p>When a new object is created it will have its own new set of instance variables (<strong>Global Variables</strong>)(common pool of data for all methods)</p><p>Object: contains data and responds to messages</p><p>Class: has template to create object and has code</p><p>When a method executes - it does for an object it has complete access of instance variables and <strong>local variable</strong></p><h2 id="Scope-of-Variables"><a href="#Scope-of-Variables" class="headerlink" title="Scope of Variables"></a>Scope of Variables</h2><ul><li>Scope is region of program where the variable is visible</li><li>Scope of parameter and <u>local variable</u> is restricted to the methods</li><li>Scope of instance variable(<u>global variable</u>) is all methods of the class</li><li>Compiler will flag it as error if you go out of scope</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Block scope&#123;&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> myInt=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Variables in different blocks</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> myInt=<span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Life-Time-of-Variables"><a href="#Life-Time-of-Variables" class="headerlink" title="Life Time of Variables"></a>Life Time of Variables</h2><p>The time period during which the variable can be used</p><ul><li><strong>Local variables</strong>: Single execution of method</li><li><strong>Formal parameter</strong>: Single execution of method (new value for the next call)</li><li><strong>Instance(global) variable</strong>: Available during life time of object</li><li>Recycling (<strong>duplicating</strong>) the variable names: Is allowed because of scope resolution will take care of this issue</li></ul><p>Good usage of:</p><ul><li>Instance variable<ul><li>Be careful not to use it for other purposes</li></ul></li><li>Parameter</li><li>Local variable<ul><li>Don’t use to remember state of object (local variable goes out o the scope when the method is done)</li></ul></li></ul><h2 id="Class-Hierarchy-in-Java"><a href="#Class-Hierarchy-in-Java" class="headerlink" title="Class Hierarchy in Java"></a>Class Hierarchy in Java</h2><p>Java has hierarchy of classes.</p><ul><li>Object is the base of this hierarchy.</li><li>A class immediately after another class is called <strong>subclass</strong>(child) of its <strong>superclass</strong>(parent)</li><li>All classes in Java has one parent and many children(except Object class)</li><li>A new class in the hierarchy will inherit commonality of its parent class(superclass)</li><li>You use extend keyword to extend the base class</li><li>If you omit extend, it automatically inherits from Objects</li></ul><p>Inheritance:</p><ul><li>Different kinds of objects have commonality and differences: Some additional features<ul><li>Mountain bikes have gears, while mountain bikes also have two wheels like road bikes.</li></ul></li><li>Specialized objects <em>inherit</em> the commonality from other classes</li><li>Subclass inherits commonality from superclasses <ul><li><code>class SolidBox</code> extends <code>Box{...}</code></li></ul></li></ul><p>Demo:</p><ol><li>Use packages.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utility.*;</span><br><span class="line"></span><br><span class="line">Box defaultBox=<span class="keyword">new</span> Box();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>When you are creating new Class, you can add package and superclass.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyBox</span> <span class="keyword">extends</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String boxName = <span class="string">"Default Fancy Box"</span>;</span><br><span class="line">    <span class="comment">//The following two blocks can be generated by eclipse</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBoxName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boxName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoxName</span><span class="params">(String boxName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boxName=boxName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawYourself</span><span class="params">(<span class="keyword">int</span> howBig)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.sethSize(Super.gethSize * howBig);</span><br><span class="line">        <span class="keyword">super</span>.setvSize(Super.getvSize * howBig);</span><br><span class="line">        <span class="keyword">super</span>.drawYourself();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">(<span class="keyword">int</span> hSize, <span class="keyword">int</span> vSize, String hStr, String vStr, String fillerStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(hSize, vSize, hStr, vStr, fillerStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FancyBox</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(h,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utility.*;</span><br><span class="line"></span><br><span class="line">FancyBox fbox=<span class="keyword">new</span> FancyBox();</span><br></pre></td></tr></table></figure><p>Interitance: <code>Source</code> →<code>Override/Implement Methods</code> →<code>drawYourself</code></p><p>choose the methods that you want to override.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Class&quot;&gt;&lt;a href=&quot;#Class&quot; class=&quot;headerlink&quot; title=&quot;Class&quot;&gt;&lt;/a&gt;Class&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>反思</title>
    <link href="https://github.com/JiamingXie/2018/10/23/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0181023/"/>
    <id>https://github.com/JiamingXie/2018/10/23/股市观察日记181023/</id>
    <published>2018-10-23T10:34:18.000Z</published>
    <updated>2018-10-23T10:45:37.500Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新了。</p><p>简单点评一下最近的股市。</p><p>因为上周末的利好刺激所以周一股市大涨了，券商板块全部涨停，上一次还是14年牛市的时候，还是很新奇的。其他板块也被带动大涨，看得出这一波的龙头就是金融股了。</p><p>周二马上迎来回调，虽然回调力度不大，白酒砸盘厉害。我个人觉得这反而是个不错的信号，等这波白马止跌了，那么底部就差不多了。</p><p>整体上来看，上周五和这周一的行情是暂时的反弹行情，虽然可以持续一段时间但是真正的底部还没有出来。政策底出来之后还有一段时间才会出市场底，而后是基本面底部。所以这波没有参与到问题也不大，之后还有回调的机会。政策底之所以先于市场底出现，是因为没有政策利好刺激，大盘还得跌。对于判断不准的情况也可以分批建仓，现在已经是明确的底部区间了，无非不知道这还要持续多久，可能还需半年才能走出底部。金融股中的强势股估计回调力度不大，仅仅是横盘整理，等整理完毕后，必然向上突破带头冲锋。</p><hr><p>最近其实每天都看很久的盘，而且要操作，有点累了，所以都没写总结。发现自己交易的时候心态还是很差的，经常咋咋呼呼的，没法完全遵循自己的交易原则。其实只要好好遵循自己的交易逻辑，就不太容易亏钱。我自己也亏了一些，这几天每天都在反思这个问题。有时候能判断盘面形式了，交易的手完全不跟着脑子走。</p><p>希望自己以后交易都能遵循以下原则：</p><ol><li>价值投资的股，只要不深套，就不要出手</li><li>只在下跌时买进（现在技术不好，拒绝追涨战术），只在上涨时卖出（除了止损的情况外）</li><li>剩下的以后再加吧…</li></ol><p>当交易员没有一颗强大的内心是不行的，最好能像机器人一样没有感情。博弈的时候，就算做错9次决策，第十次还是要去做。涨跌都只是数字而已，不要频繁操作，追涨杀跌。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有更新了。&lt;/p&gt;
&lt;p&gt;简单点评一下最近的股市。&lt;/p&gt;
&lt;p&gt;因为上周末的利好刺激所以周一股市大涨了，券商板块全部涨停，上一次还是14年牛市的时候，还是很新奇的。其他板块也被带动大涨，看得出这一波的龙头就是金融股了。&lt;/p&gt;
&lt;p&gt;周二马上迎来回调，虽然回调力度不
      
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>今天的我是一个有福气的我</title>
    <link href="https://github.com/JiamingXie/2018/10/16/%E4%BB%8A%E5%A4%A9%E7%9A%84%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E7%A6%8F%E6%B0%94%E7%9A%84%E6%88%91/"/>
    <id>https://github.com/JiamingXie/2018/10/16/今天的我是一个有福气的我/</id>
    <published>2018-10-16T11:11:53.000Z</published>
    <updated>2018-10-16T11:23:12.198Z</updated>
    
    <content type="html"><![CDATA[<p>今天收到了一个包裹，里面是雪媚娘和麻薯。</p><p>咦，我从来没有买过这个东西呀？问了妈妈，妈妈也说不是她寄的。</p><p>完了，万一人家寄错了，不小心吃了还得赔，赶紧去问问。</p><p>…</p><p>陆铁柱：是谁寄的呀</p><p>我：不知道呀。我从小到大都没人对我这么好过，谁寄的我就嫁给谁。</p><p>…</p><p>赶紧发了一条票圈向全世界发问，到底是哪位好心人给我寄的好吃的。</p><p>阿鱼：大傻砸</p><p>我：你寄的吗？？</p><p>阿鱼：好吃吗？</p><p>我：QAQ嗯（虽然我还没吃到）你怎么对我这么好</p><p>阿鱼：发工资了，就想请你吃好吃的。</p><p>我：QAQ TAT那你回来我也请你吃大餐。从小到大还没人对我这么好呢。</p><p>阿鱼：你好好吃吧，我先去准备明天的考试了。</p><p>…</p><p>我好像，从小都没有被人献过殷勤，也没有人对我有什么特殊的情愫，所以对这些事情都特别敏感，一旦发生就会感动到稀里哗啦以至于奋不顾身。那一句“是谁寄的我就嫁给谁”是发自肺腑的真心话，没准哪一天哪个人对我好了我就分分钟跪倒膝下被收入囊中。不知道这是好是坏，也不知道所谓的我的2018的桃花到底是哪里来的，毕竟2018只剩两个半月了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天收到了一个包裹，里面是雪媚娘和麻薯。&lt;/p&gt;
&lt;p&gt;咦，我从来没有买过这个东西呀？问了妈妈，妈妈也说不是她寄的。&lt;/p&gt;
&lt;p&gt;完了，万一人家寄错了，不小心吃了还得赔，赶紧去问问。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;陆铁柱：是谁寄的呀&lt;/p&gt;
&lt;p&gt;我：不知道呀。我从小到
      
    
    </summary>
    
      <category term="生活杂记" scheme="https://github.com/JiamingXie/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>杀跌继续，反弹即将到来</title>
    <link href="https://github.com/JiamingXie/2018/10/16/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0181016/"/>
    <id>https://github.com/JiamingXie/2018/10/16/股市观察日记181016/</id>
    <published>2018-10-16T10:31:35.000Z</published>
    <updated>2018-10-16T11:18:53.160Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>三大指数平开，开盘之后中小创表现颓势，个股一度杀跌猛烈，随后权重板块开始企稳回升，上证50一度大涨，创业板也被带动翻红，但好景不长，中小创开始单边回落，午后三大股指毫无回暖迹象，以炭黑、铁矿石为首的资源板块跌幅居前，加之题材概念的杀跌，市场再度全线翻绿，创业板一度跌3%，仅银行板块上涨，临近尾盘，大盘弱势盘整。截止收盘沪指跌0.85%，深成指跌1.95%，创业板指跌2.68%，均创出调整以来新低。</p><p>沪指</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa8t72uqej218u0uc7fn.jpg" alt=""></p><a id="more"></a><p>深指</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa8zotydoj218s0ueqeb.jpg" alt=""></p><p>创业板</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa8zyzjekj219a0umwou.jpg" alt=""></p><p>今天的热点是金融股和天然气（公用事业），资金净流入最多的板块是保险和银行。明天估计金融股歇息一下，之后要拉升的时候再出马。</p><hr><p>连续两天的下杀一下子把股民们都吓傻了（虽然大家都习惯了，这叫回调），但是其实今天下午应该算是看到机会了。</p><p>这两天的操作思路如下：</p><p>首先昨天进场的时候应该选择今天有机会冲高的龙头股。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa968ih9wj20ms0l0add.jpg" alt=""></p><p>可以看到大概10点半左右的时候东财跳水，到10：45左右开始横盘，东财这两天会出三季度预告，所以不能重仓，万一业绩不及预期就会跌。早盘轻仓介入以后，中午出了三季度预告，虽然不及预期，但是好于大部分券商，下午如何走要看各个投资者的解读。下午开盘的时候上突非常猛烈，说明市场还是比较看好的，这个时候就可以拿着手上的仓位躺倒了。下午因为受到大盘拖累所以没有走出非常好的走势，不过已经强于大盘了。</p><p>到了今天，因市场悲观气氛浓厚，个股会继续阴跌，所以应该在早盘冲高的时候出货，等到下来再接回。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa9c3ven5j218o0kgdln.jpg" alt=""></p><p>金融股经过今天一天的拉抬，之后资金需要休息一下，但是之后大盘整体的反弹和拉升，还是需要金融股的力量。</p><hr><p>再来看另外一只基建的龙头股，中国铁建。</p><p>中国铁建在基建股里属于老大哥的存在，每次需要护盘或者拉行情总有它的身影。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa9fpey76j218y0u4qb7.jpg" alt=""></p><p>熊市的时候总要有几个板块出来捍卫一下大A的尊严，基建就是其中之一，而铁建是基建的龙头。</p><p>这位哥这几天也是很惨了，补跌跌了约莫有10个点了。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa9hotm3jj219c0uajzj.jpg" alt=""></p><p>那么如何看出它要启动了呢？首先是看大盘，大盘今天的走法是横跌横跌横，跌无可跌，跌到位了。其次是铁建这两天的补跌是投资者的一个判断，他们判断这种时候市场不适宜做多，但是其实大盘已经差不多没有下跌空间了，他们意识到自己犯错误了，所以要把铁建的股价干回去。第二个判断是铁建下午的走势，在上午放了几波量（长色绿柱）以后，下午铁建的走势明显要好于大盘，而且上突欲望还是比较强烈的。当看到铁建两次站稳的时候，就可以考虑在10.70~10.75之间建仓了。虽然之后又有小幅下跌，但是那是受到还在加速杀跌的地产股和医药股的拖累。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa9j7vd36j21a20umjze.jpg" alt=""></p><p>炒股的收益本质是你在别人做错判断的时候不慌不忙抄底，在别人疯狂时不慌不忙卖出，所以对局势的判断是至关重要的。铁建的机会就在于，投资者做错了判断，铁建的杀跌是不合时宜的，所以要干回去。</p><p>明天的早盘有可能会走出两种走势，一种是直接高开并且震荡上行；另外一种是先再下杀一波然后红盘。比较强势的股可能会走出前面那种走势，而较弱的走后面那种走势，不管是哪种走势，明天的早盘一定是追涨策略（只要有低价筹码就是机会），看谁涨得好就干谁。周五收红，站上2600。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三大指数平开，开盘之后中小创表现颓势，个股一度杀跌猛烈，随后权重板块开始企稳回升，上证50一度大涨，创业板也被带动翻红，但好景不长，中小创开始单边回落，午后三大股指毫无回暖迹象，以炭黑、铁矿石为首的资源板块跌幅居前，加之题材概念的杀跌，市场再度全线翻绿，创业板一度跌3%，仅银行板块上涨，临近尾盘，大盘弱势盘整。截止收盘沪指跌0.85%，深成指跌1.95%，创业板指跌2.68%，均创出调整以来新低。&lt;/p&gt;
&lt;p&gt;沪指&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fwa8t72uqej218u0uc7fn.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>A股弱势下跌后上演V形反弹，创业板带头冲锋</title>
    <link href="https://github.com/JiamingXie/2018/10/14/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0181012/"/>
    <id>https://github.com/JiamingXie/2018/10/14/股市观察日记181012/</id>
    <published>2018-10-14T10:42:57.000Z</published>
    <updated>2018-10-14T11:23:12.865Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw7xq584u2j21940j4gr3.jpg" alt=""></p><p>受外盘影响，两市小幅低开，随后在民航板块的带动下，三大指数一度翻红，但此后指数随即回落，两市一度再现杀跌，随后白马股逐渐企稳，指数也随即回升，午后两市延续午前的走势，题材蓝筹稳步走强，创业板一度涨逾1%，上证50则大涨2%，市场在经历了连续的大幅杀跌之后，抄底资金开始逐渐入场，目前市场总体回暖，临近尾盘，横盘震荡。</p><p>截至收盘，沪指收报2606.92点，涨0.91%，成交额1428亿；深成指收报7558.28点，涨0.45%，成交额1661亿；创业板收报1268.41点，涨0.52%，成交额472亿。<br>沪指本周下跌7.6%，创下八个月最大单周跌幅。</p><p>带头冲锋的板块主要是白马蓝筹和高送转。</p><p>主力净流入行业板块前五：银行、电子制造、食品加工、保险、机场<br>主力净流入概念板块前五：次新股、中字头、装配式建筑、互联网保险、超级品牌<br>主力净流入个股前十：格力电器、中国平安、万科A、东方财富、伊利股份、雅运股份、恒瑞医药、平安银行、中国铁建、超频三</p><a id="more"></a><p>龙头股的走势非常典型，不随大盘下跌，分时DDX强势走高，说明资金进入意愿十分强烈。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw7yr3pi82j21960oa455.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw7ys8p0qvj21980o2n3l.jpg" alt=""></p><p>东财下午的时候横盘了很久，但是完全不虚，因为从买卖档口可以看到有大单一直在10.6吃单。股价一直不破10.58。周一可以高抛低吸，降低成本。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw7yu13542j218w0oc44y.jpg" alt=""></p><hr><p>沪指本周哐叽了两次，其实是很大程度受到了外围的影响的。贸易战加码和美联储加息，说对中国没影响是不可能的，很有可能还是长期的影响，比如国产软件、国产芯片公司。这种影响可能会在接下来的几年里体现出来。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw7xt0do60j21980jaagk.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fw7xq584u2j21940j4gr3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;受外盘影响，两市小幅低开，随后在民航板块的带动下，三大指数一度翻红，但此后指数随即回落，两市一度再现杀跌，随后白马股逐渐企稳，指数也随即回升，午后两市延续午前的走势，题材蓝筹稳步走强，创业板一度涨逾1%，上证50则大涨2%，市场在经历了连续的大幅杀跌之后，抄底资金开始逐渐入场，目前市场总体回暖，临近尾盘，横盘震荡。&lt;/p&gt;
&lt;p&gt;截至收盘，沪指收报2606.92点，涨0.91%，成交额1428亿；深成指收报7558.28点，涨0.45%，成交额1661亿；创业板收报1268.41点，涨0.52%，成交额472亿。&lt;br&gt;沪指本周下跌7.6%，创下八个月最大单周跌幅。&lt;/p&gt;
&lt;p&gt;带头冲锋的板块主要是白马蓝筹和高送转。&lt;/p&gt;
&lt;p&gt;主力净流入行业板块前五：银行、电子制造、食品加工、保险、机场&lt;br&gt;主力净流入概念板块前五：次新股、中字头、装配式建筑、互联网保险、超级品牌&lt;br&gt;主力净流入个股前十：格力电器、中国平安、万科A、东方财富、伊利股份、雅运股份、恒瑞医药、平安银行、中国铁建、超频三&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>受外围影响，千股跌停再现</title>
    <link href="https://github.com/JiamingXie/2018/10/11/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0181011/"/>
    <id>https://github.com/JiamingXie/2018/10/11/股市观察日记181011/</id>
    <published>2018-10-11T11:30:59.000Z</published>
    <updated>2018-10-11T12:41:25.637Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>在连续两天收出星以后，A股开盘低开3.7个点，之后一蹶不振，指数毫无反抗，个股单边下行，市场不足百家个股上涨，市场超3300只个股下跌，午后两市稳步走弱，沪指跌破2600点关口，超1000只个股跌停，仅50只股票上涨，三大股指一度均跌6%，临近尾盘，大盘弱势震荡。<br>截至收盘，沪指收报2583.46点，至近四年新低，跌5.22%，创逾31个月最大单日跌幅，成交额1701亿；深成指收报7524.09点，跌6.07%，成交额1886亿；创业板收报1261.88点，跌6.30%，成交额538亿。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw4io38a2nj219g0lu0wl.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw4ioeq0crj21980l278n.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw4ioly7mlj21960l8q6x.jpg" alt=""></p><a id="more"></a><hr><p>看来之前一直讨论的“熔断底”并不是真正的底部，A股要企稳还有很长的路要走。</p><p>入行几个月，一直受到熊市的摧残，现在已经有了非常强大的内心，一个交易员应该不为情绪所影响，时时刻刻都保持冷静，不因为盈亏影响自己的判断。今天的这种形势，对广大持股股民来说，是一种灾难，但是同时也是一种机会。</p><p>在国庆回来看到暴跌的情况下，就不应加仓了，这样的市场状态并不是可以介入的状态。这几天的暴跌是外围对A股的影响，也是股民对未来的一种预期。美联储加息导致大量资金从股市撤出，企业借贷成本上升，这对经济基本面来说是不向好的，对于股市中的上市公司来说也是不利的。另外美国与墨、加签订明显针对中国的协定，虽然中国现在国力强盛，但是还是有非常多的产品依赖进口，试问如果现在美国断掉我们的芯片供应，我们的电子产业不会受到巨大冲击吗？国产的芯片、软件股是热点，他们是带领反弹呢，还是带头砸盘呢？科技股受到外部的强烈打击，还需要等一等，最终有它们站出来的时候。从夏天观察到现在，科技股的龙头有好几支，用友、浪潮、恒华等等，但是最近都被杀到妈都认不得了，今天更加是好几支跌停，但是也不排除有被错杀的，短线反而是机会。</p><p>大盘一直走弱，在这个过程中基本面好的，不断走强的股票才是好股票，大盘一直砸出最低，但是这些股票都不创新低了，都是具有配置价值的股票。在经济基本面不向好的时候，应该多配置一些刚需的板块，比如<strong>消费和医药</strong>，因为人饿了得吃饭，生病了得吃药。为什么之前消费降级被炒得很热，榨菜股方便面股几个月翻了翻，因为股民的钱都被套了，大家没钱消费啊，拉动GDP要靠什么？要靠消费。有人问现在茅台都这么高了还能买吗？当然能买，茅台是好公司，五粮液也是好公司，只是之前涨太高了，这半年都跟着其他白马一起被杀。医药板块，最近的消息是有好几款抗癌药进了医保，一些龙头公司也有利好，开始研发新药，之后的走势应该会发生分化，强者恒强，所以这类股票就要看准龙头买（恒瑞医药、片仔癀等）。当然有时也要靠基建，基建之前站出来过几次（中国建筑、中国铁建、中国交建），之后什么时候站出来，还是个未知数。还有什么股票可以配置？<strong>三金-保险、银行、券商。</strong>这些板块都是国家队大量持有的权重股，风险比较小。一般情况下都是四大美女-基建、三金、科技股、白马轮流唱戏，市场没有热点的时候几块钱的垃圾股也会炒作一下，没有人会知道明天的热点是什么（不过以后用大数据机器学习一下没准是可以预测出来的），盘感好的大牛可以技术面做短线，但是一般的小散还是以基本面价值投资为主，结合短线高抛低吸降低成本为好。</p><p>长线来看现在很多资金都在布局，包括长线养老金入市的事情现在也落地了。不过就最近的经济局势，现在抄进去抄到的应该不是真正的底，真正的企稳可能要等到明年下半年。如果要配置绩优蓝筹股，那么现在超跌的时候，就是机会。短线不建议介入，长线可以配置资产，至于已经有仓位的，卧倒不动等大盘企稳再上车，之后应该是漫长的磨底过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在连续两天收出星以后，A股开盘低开3.7个点，之后一蹶不振，指数毫无反抗，个股单边下行，市场不足百家个股上涨，市场超3300只个股下跌，午后两市稳步走弱，沪指跌破2600点关口，超1000只个股跌停，仅50只股票上涨，三大股指一度均跌6%，临近尾盘，大盘弱势震荡。&lt;br&gt;截至收盘，沪指收报2583.46点，至近四年新低，跌5.22%，创逾31个月最大单日跌幅，成交额1701亿；深成指收报7524.09点，跌6.07%，成交额1886亿；创业板收报1261.88点，跌6.30%，成交额538亿。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fw4io38a2nj219g0lu0wl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fw4ioeq0crj21980l278n.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fw4ioly7mlj21960l8q6x.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Arrays, Methods, Strings, Class</title>
    <link href="https://github.com/JiamingXie/2018/10/10/Arrays,%20Methods,%20Strings,%20Class/"/>
    <id>https://github.com/JiamingXie/2018/10/10/Arrays, Methods, Strings, Class/</id>
    <published>2018-10-10T11:21:41.000Z</published>
    <updated>2018-10-27T10:12:36.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>Suppose your boss ask you to calculate the average temperature of a week. How can you store seven temperatures? What if you are asked to do for 365 days? What if you are asked to do for 10 years.</p><p>Array is a data structure which stores multiple values of same type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] weeklyTemp;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> av_temp=(weeklyTemp[<span class="number">0</span>] + weeklyTemp[<span class="number">1</span>]+...)/<span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>You use index to apply the element in the array. </p><p>Index starts from 0.</p><p><code>array_name.legth</code> gives the size of array.</p><a id="more"></a><p>You can also put a size for the array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> weeklytemp[];</span><br><span class="line">weeklytemp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>];</span><br><span class="line">weeklytemp[<span class="number">0</span>] = <span class="number">55</span>;</span><br><span class="line">weeklytemp[<span class="number">1</span>] = <span class="number">54</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp[]=&#123;<span class="number">55</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">52</span>,<span class="number">51</span>,<span class="number">53</span>,<span class="number">50</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> av_tmp=(tmp[<span class="number">0</span>]+tmp[<span class="number">1</span>]+tmp[<span class="number">2</span>]+tmp[<span class="number">3</span>]+tmp[<span class="number">4</span>]+tmp[<span class="number">5</span>]+tmp[<span class="number">6</span>])/<span class="number">7</span>;</span><br><span class="line">System.out.printf(<span class="string">"The Average Temperature is: %f"</span>, av_tmp);</span><br></pre></td></tr></table></figure><hr><p><strong>Assigning one array to another actually assigns the references!!</strong></p><p><strong>Essentially both of them are same array!(mapping to the same memory)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lastweektmp[]=&#123;<span class="number">55</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">52</span>,<span class="number">51</span>,<span class="number">53</span>,<span class="number">50</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> thisweektmp[];</span><br><span class="line">thisweektmp=lastweektmp;</span><br></pre></td></tr></table></figure><p>when you change <code>lastweektmp</code>, <code>thisweektmp</code> will also changes; vice versa.</p><hr><p><strong>Use Loop</strong></p><ul><li><p>get the sum of …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> weeklyTmp[]=&#123;<span class="number">69</span>,<span class="number">70</span>,<span class="number">71</span>,<span class="number">68</span>,<span class="number">66</span>,<span class="number">71</span>,<span class="number">70</span>&#125;;</span><br><span class="line"><span class="keyword">float</span> sum=<span class="number">0.0f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;weeklyTemp.length;i++)</span><br><span class="line">    sum+=weeklyTemp[i];</span><br></pre></td></tr></table></figure></li><li><p>get the max of…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> maxTemp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;weeklyTemp.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(weeklyTemp[i]&gt;maxTemp)</span><br><span class="line">        maxTemp=weeklyTemp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>get the min of…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> min = weeklyTmp[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> day=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(day=<span class="number">1</span>;day&lt;<span class="number">7</span>;day++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(min&gt;weeklyTmp[day])</span><br><span class="line">        min = weeklyTmp[day];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>Comparing arrays</strong></p><p>Array name is reference. When you compare values (other than built in type) you are comparing the reference.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> weeklyTmp1[]=&#123;<span class="number">69</span>,<span class="number">70</span>,<span class="number">71</span>,<span class="number">68</span>,<span class="number">66</span>,<span class="number">71</span>,<span class="number">70</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> weeklyTmp2[]=&#123;<span class="number">69</span>,<span class="number">70</span>,<span class="number">71</span>,<span class="number">68</span>,<span class="number">66</span>,<span class="number">71</span>,<span class="number">70</span>&#125;;</span><br></pre></td></tr></table></figure><p>But <code>weeklyTmp1=weeklyTmp2</code> is False because they are mapping to different references.</p><h1 id="Character-Strings"><a href="#Character-Strings" class="headerlink" title="Character Strings"></a>Character Strings</h1><h2 id="Characters-in-Java"><a href="#Characters-in-Java" class="headerlink" title="Characters in Java"></a>Characters in Java</h2><ul><li>Printable and nonprintable</li><li>Lowercase letters</li><li>Uppercase letters</li><li>Numbers</li><li>Special characters</li></ul><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><ul><li>is a sequence of characters</li><li>not a formal data type into store texts java</li><li>Strings are objects in java</li><li>java provides string class to create and use them</li><li>it is part of every java installation (no import needed)</li><li>the positions in the strings are enumerated starting with <strong>zero</strong></li><li>String literals are represented by double-quoting the content: “Text”.</li></ul><p>String class provides many useful methods:</p><ul><li><p><strong>int length()</strong>  </p><p>return length of string</p></li><li><p><strong>char charAt(int index)</strong> </p><p>returns a char ar index</p></li><li><p><strong>boolean equals(String other)</strong></p></li><li><p><strong>int compareTo(String other)</strong></p><p>Compares this string &amp; other returns</p><p>0 for equal </p><p>neg if less</p><p>otherwise pos</p></li><li><p><strong>String substring(int beginIndex, int endIndex)</strong></p><p>Returns substring</p></li><li><p><strong>String trim()</strong></p><p>Trim out the blank</p></li><li><p><strong>bolean equalsIgnoreCase(String other)</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (Character.isDigit(c))</span><br><span class="line">    System.out.printf(<span class="string">"%c is a digit\n"</span>, c);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.printf(<span class="string">"%c is not a digit\n"</span>, c);</span><br><span class="line"></span><br><span class="line">String myString = <span class="string">"Whatever you want to put here"</span>;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"The length of the string is: %d\n"</span>, myString.length());</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"The character at %d position is %c\n"</span>,<span class="number">5</span>,myString.charAt(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"The index of \"%c\" is at %d position\n"</span>,c,myString.index(c,<span class="number">10</span>));<span class="comment">//find the character "a" after the 10th character</span></span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"The part of string starting from %d to %d is %s\n"</span>,<span class="number">5</span>,<span class="number">10</span>,myString.substring(<span class="number">5</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure><hr><p>Unlike arrays, <code>string1=&quot;Hello world!&quot;</code> equals to <code>string2=&quot;Hello world!&quot;</code>. Because they point to the same string.</p><p>so never use <code>string1==string2</code> to test the equality. <strong>Don’t test the equality of <u>reference</u>!! You should test the <u>method</u>!!</strong> <code>string1.equals(string2)</code></p><p>If <code>string1=&quot;hello&quot;</code> and <code>string2=&quot;Hello&quot;</code>, then we can use <code>equalsIgnoreCase()</code>.</p><p>You can also compare the strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this<code>String</code> object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this <code>String</code> object lexicographically precedes the argument string. The result is a positive integer if this <code>String</code> object lexicographically follows the argument string. The result is zero if the strings are equal; <code>compareTo</code> returns <code>0</code> exactly when the <code>equals(Object)</code> method would return <code>true</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String string1=<span class="string">"hello"</span>;</span><br><span class="line">String string2=<span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(string1.compareTo(string2)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.print(<span class="string">"String1 is greater."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(string1.compareTo(string2)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.print(<span class="string">"String2 is greater."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"Both are equal"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><p>Class and main will get large:</p><ul><li>unreadable</li><li>Not maintainable</li><li>repeated code</li></ul><p>Method is a snippet of programs working together allows:</p><ul><li>Code re-use</li><li>Team development</li><li>Well structured application</li><li>Easy maintainance</li></ul><p>The methods really define the behavior of an object.</p><p><code>printf()</code>, <code>nextInt()</code> are all methods.</p><p>We can also write our own methods.</p><p>a. Declaration </p><p>b. Define </p><p>c. Use (Invoke)</p><p><strong>General Form</strong></p><p><code>method_type, method_name(argument_list);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getBracket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>float</code> and <code>void</code> are different kinds of methods.</p><p>When you want to call the methods, it is just like when you are using the system methods.</p><p>Before you use the method, you need to <strong>define the method first</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getBracket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> yourTaxBracket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>Demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTemperatures</span><span class="params">(<span class="keyword">int</span> [] tempArray)</span></span>&#123;</span><br><span class="line">    Scanner getInput = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">for</span>(day=<span class="number">0</span>;day&lt;tempArray.length;day++)&#123;</span><br><span class="line">        System.out.printf(<span class="string">"Enter the temp: "</span>);</span><br><span class="line">        tempArray[day] = getInput.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTemp</span><span class="params">(<span class="keyword">int</span> [] tempArray)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">for</span> (day=<span class="number">0</span>;day&lt;tempArray.length;day++)</span><br><span class="line">        System.out.printf(<span class="string">"The temperature on day %d was %d\n"</span>,day+<span class="number">1</span>,tempArray[day]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span> [] tempArray)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min=tempArray[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">for</span> (day=<span class="number">1</span>;day&lt;tempArray.length;day++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (min&gt;tempArray[day])</span><br><span class="line">            min = tempArray[day];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> [] tempArray)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> max=tempArray[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(day=<span class="number">1</span>;day&lt;tempArray.length;day++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (max&lt;tempArray[day])</span><br><span class="line">            max = tempArray[day];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">(<span class="keyword">int</span> [] tempArray)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="keyword">int</span> total = tempArray[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (day=<span class="number">1</span>;day&lt;tempArray.length;day++)</span><br><span class="line">        total +=tempArray[day];</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseBox</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawHLine</span><span class="params">(<span class="keyword">int</span> hSize; String hstr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i++&lt;h)</span><br><span class="line">            System.out.print(hstr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawVLine</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v, String vstr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++&lt;v-<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.print(vstr);</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j++&lt;h-<span class="number">2</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(vstr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hSize=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> vSize=<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        drawHLine(hSize,<span class="string">"+"</span>);</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        drawVLine(hSize,vSize,<span class="string">"|"</span>);</span><br><span class="line">        drawHLine(hSize,<span class="string">"+"</span>);</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Class-and-Objects"><a href="#Class-and-Objects" class="headerlink" title="Class and Objects"></a>Class and Objects</h1><p>Java is a object oriented programming (OOP).</p><p>All real-world object has <strong><em>state and behavior</em></strong>.</p><p>Object’s <strong>state</strong> is stored in <strong><em>fields</em></strong> (variables)</p><ul><li>it could be <strong>primitive data</strong> type or another object</li></ul><p>Object’s <strong>behavior</strong> is defined by <strong><em>methods</em></strong> (functions)</p><ul><li>it operates on <strong>internal state</strong>. Hides details. Providing OOP Encapsulation.</li></ul><p>A dog object can provide: Age and Name as fields to store state and bark, eat, wagthetail methods for behavior.</p><p><strong>Benefits</strong>:</p><p>Independent development: <strong>Modularity</strong></p><p>Internal detail is hidden: <strong>Encapsulation</strong></p><p>Reduce redundancy: Code can be <strong>re-used</strong></p><p>Compartmentalizing: Ease of <strong>maintainability</strong></p><hr><ul><li><p>Class:</p><p>A blue print to create an individual object.</p><p>*Red Honda and blue Honda are built in the same factory. There state and behavior are similar.</p><p>A big BOX or small box is created from same box bue print.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Object:</p><p>A red Honda is an instance(object) of a generic Honda (class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Honda redHonda = <span class="keyword">new</span> Honda();</span><br><span class="line">Honda blueHonda = <span class="keyword">new</span> Honda();</span><br></pre></td></tr></table></figure><p>The behavior is  similar but different state.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Box bigBox = <span class="keyword">new</span> Box(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">//object</span></span><br><span class="line">Box smallBox = <span class="keyword">new</span> Box(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">bigBox.drawYourself();</span><br><span class="line"><span class="comment">//behavior</span></span><br><span class="line">smallBox.drawYourself();</span><br><span class="line"></span><br><span class="line">bigBox.changeVLineSymbol(<span class="string">"="</span>);</span><br><span class="line">bigBox.drawYourself();</span><br></pre></td></tr></table></figure></li><li><p>Inheritance:</p><ul><li>Different kinds of objects have commonality and differences: some additional features</li><li>Specialized objects <em>inherit</em> the commonality from other classes</li><li>Subclass inherits commonality from <em>superclasses</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SolidBox</span> <span class="keyword">extends</span> <span class="title">Box</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawHLine</span><span class="params">(<span class="keyword">int</span> hSize; String hstr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i++&lt;h)</span><br><span class="line">            System.out.print(hstr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawVLine</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v, String vstr, String hstr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++&lt;v-<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.print(vstr);</span><br><span class="line">            drawHLine(h-<span class="number">2</span>,hstr);</span><br><span class="line">            System.out.println(vstr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawBox</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> v, String vstr, String hstr, String fstr)</span></span>&#123;</span><br><span class="line">        drawHLine(hSize,hstr);</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        drawVLine(hSize,vSize,vstr,fstr);</span><br><span class="line">        drawHLine(hSize,hstr);</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can apply the method in Box in other public class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Box.drawBox(<span class="number">20</span>,<span class="number">10</span>,<span class="string">"|"</span>,<span class="string">"-"</span>,<span class="string">"$"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box myBox= <span class="keyword">new</span> Box(<span class="number">20</span>,<span class="number">10</span>,<span class="string">"|"</span>,<span class="string">"-"</span>,<span class="string">"$"</span>);</span><br><span class="line">myBox.drawBox();<span class="comment">//no need for parameters here</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Arrays&quot;&gt;&lt;a href=&quot;#Arrays&quot; class=&quot;headerlink&quot; title=&quot;Arrays&quot;&gt;&lt;/a&gt;Arrays&lt;/h1&gt;&lt;p&gt;Suppose your boss ask you to calculate the average temperature of a week. How can you store seven temperatures? What if you are asked to do for 365 days? What if you are asked to do for 10 years.&lt;/p&gt;
&lt;p&gt;Array is a data structure which stores multiple values of same type.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [] weeklyTemp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; av_temp=(weeklyTemp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + weeklyTemp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+...)/&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You use index to apply the element in the array. &lt;/p&gt;
&lt;p&gt;Index starts from 0.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array_name.legth&lt;/code&gt; gives the size of array.&lt;/p&gt;
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>陷入僵局</title>
    <link href="https://github.com/JiamingXie/2018/10/09/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0181009/"/>
    <id>https://github.com/JiamingXie/2018/10/09/股市观察日记181009/</id>
    <published>2018-10-09T10:15:07.000Z</published>
    <updated>2018-10-11T06:06:42.124Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>今天市场震荡分化，上证指数和上证50微红，其余指数小跌。从板块来看，采掘服务、石油、煤炭、次新股、航运、有色等板块涨幅居前，军工、国产软件、医药商业、半导体等板块跌幅居前。</p><p>截至收盘，沪指报2721.01点，涨幅0.17%；深成指报8046.39点，跌幅0.18%；创指报1345.95点，跌幅0.57%。创业板表现较差，盘中创出2014年8月以来新低。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw2tizkvzxj219e0kq0wf.jpg" alt=""></p><a id="more"></a><p>创业板的走势并不容乐观，之后还可再等一等。中美贸易战对于国产软件股和芯片股都是利好，之后总有他们站出来的时候。</p><p>沪深300和上证50的反弹行情还可以继续关注，今天收出的小阳说明市场还是比较犹豫的，大家不知道是应该加仓还是之后会继续跌。大概在2700的位置会有一个支撑，如果这个位置没有撑住，那么建议观望一下。中线行情依旧是震荡磨底，可以高抛低吸降低成本。长线现在是不错的建仓时机，这从私募加仓也可以看得出来。</p><hr><p><strong>消息面</strong></p><ul><li><p>【私募开始加仓，主要布局大盘蓝筹、大消费及新经济板块】</p><p>相关数据显示，9月份私募平均仓位为62.5%，较8月份上升约10个百分点，逆转了前5个月平均仓位持续下滑的趋势。部分中小型私募在9月下旬开始左侧建仓，主要布局大盘蓝筹股、大消费及新经济板块，而部分大型私募也进行了“倒金字塔”式布局。某资深业内人士表示，“淡水泉、星石、重阳等知名私募，仓位一直维持较高，对市场长期走势维持乐观。值得关注的是，一些中小型私募在经历减仓后，9月份反而开始慢慢加仓。”（上证报）</p></li><li><p>【机构：9月CPI增速或上升 基建投资有望见底回升】</p><p>近日，多机构发布了对9月份宏观经济数据的预测。从发布的预测来看，市场对9月份及接下来的经济形势较为悲观，关注点主要集中于需求侧增长乏力及外贸风险方面。在CPI和PPI数据方面，多家机构认为9月份CPI同比增速将进一步抬升至2.5%左右，PPI同比增速进一步回落至3.7%左右。（证券时报）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天市场震荡分化，上证指数和上证50微红，其余指数小跌。从板块来看，采掘服务、石油、煤炭、次新股、航运、有色等板块涨幅居前，军工、国产软件、医药商业、半导体等板块跌幅居前。&lt;/p&gt;
&lt;p&gt;截至收盘，沪指报2721.01点，涨幅0.17%；深成指报8046.39点，跌幅0.18%；创指报1345.95点，跌幅0.57%。创业板表现较差，盘中创出2014年8月以来新低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fw2tizkvzxj219e0kq0wf.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>国庆归来开门绿</title>
    <link href="https://github.com/JiamingXie/2018/10/08/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0181008/"/>
    <id>https://github.com/JiamingXie/2018/10/08/股市观察日记181008/</id>
    <published>2018-10-08T15:13:58.000Z</published>
    <updated>2018-10-09T00:41:36.748Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>截至收盘，沪指收报2716.51点，跌3.72%，收创三个半月最大单日跌幅，成交额1415.3亿；深成指收报8060.83点，跌4.05%，成交额1474.1亿；创业板收报1353.67点，跌4.09%，成交额401亿。<br>行业板块全线飘绿，个股一片普跌，跌停个股数早盘较少，但随着股指进一步下跌，午后两市跌停股数明显增多，市场恐慌情绪上升。安防、通讯、旅游酒店、保险、酿酒、电子、民航、软件等多个行业板块遭重挫，板块指数跌逾4%，医疗、环保、银行、文化传媒、航天航空、券商等行业板块跌幅也不浅，板块指数跌逾3%。公用事业、贵金属、石油等跌幅相对较小。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw1nyy2po6j21920kgtdz.jpg" alt=""></p><a id="more"></a><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fw1nzsntaaj21920iwjvu.jpg" alt=""></p><p>今天的这波暴跌其实还是比较符合预期的，只是当时没想到会杀这么多。国庆期间外围股市纷纷下跌，中国作为经济大国不可能独善其身，且民间有说法中国股市向来是跟跌不跟涨。国庆节期间可以说是有利空也有利好。利好是央行放水，降准，放了七个多亿出来，财政方面也有积极表示，这一步是为了帮助企业解决流动性问题，今年来因为还不上钱而使债券逾期的企业很多，也有很多投资公司因为钱收不回来不得不抛售手头其他的持仓股票。利空方面，贸易战全面打响；香港方面基本面数据并不好看；人民币补跌，破6.93，破8月15日来新低，收盘时收复至6.9。夜间美国方面开盘，依旧不改跌势，科技股普跌带领大盘。</p><p>目前看来不建议马上操作了，这一波持续了半个月的强力反弹在国庆的欢声笑语中结束了，现在依照外围的股市，A股还是比较有压力的，短期内很难马上反弹，但是这一波下杀同时也给了一个机会，会出现很多被大盘拖累的超跌股。目前A股的估值依旧处于历史低位，但是短期内可能比较难迅速有起色，毕竟去杠杆等政策对企业的流动性压力还是比较大的，经济基本面也并不是很好。长线依旧看好，现在是建仓机会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截至收盘，沪指收报2716.51点，跌3.72%，收创三个半月最大单日跌幅，成交额1415.3亿；深成指收报8060.83点，跌4.05%，成交额1474.1亿；创业板收报1353.67点，跌4.09%，成交额401亿。&lt;br&gt;行业板块全线飘绿，个股一片普跌，跌停个股数早盘较少，但随着股指进一步下跌，午后两市跌停股数明显增多，市场恐慌情绪上升。安防、通讯、旅游酒店、保险、酿酒、电子、民航、软件等多个行业板块遭重挫，板块指数跌逾4%，医疗、环保、银行、文化传媒、航天航空、券商等行业板块跌幅也不浅，板块指数跌逾3%。公用事业、贵金属、石油等跌幅相对较小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fw1nyy2po6j21920kgtdz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Control Statement Series</title>
    <link href="https://github.com/JiamingXie/2018/09/29/Control%20Statement%20Series/"/>
    <id>https://github.com/JiamingXie/2018/09/29/Control Statement Series/</id>
    <published>2018-09-29T12:13:13.000Z</published>
    <updated>2018-10-06T01:28:08.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Operators-Advanced-in-Java"><a href="#Operators-Advanced-in-Java" class="headerlink" title="Operators (Advanced) in Java"></a>Operators (Advanced) in Java</h1><ul><li><p>Compound assignment operators</p><p>+=, -=, *=, /=, %=</p><p>It is just the combination of operators and assignment operators.</p><p><code>s = s+2</code> → <code>s += 2</code></p><p><code>n1 = n1 * n2</code> → <code>n1 *= n2</code></p><p>… </p></li><li><p>Increment/decrement operators</p><p>++ and –</p><p>If you want to increase by one or decrease by one, then you use “++” or “–”</p><p><code>n += 1</code> → <code>n++</code></p><p><strong><em>n++ has assigned new value to n.</em></strong></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N1,N2;</span><br><span class="line">N1=<span class="number">9</span>;</span><br><span class="line">System.out.printf(<span class="string">"%d\n"</span>,N1++);<span class="comment">//This statement will first print N1, and then add one to it. Thus, it will show the original value "9".</span></span><br><span class="line">System.out.printf(<span class="string">"%d\n\n"</span>,N1); <span class="comment">//Then in this line, 1 is added up to nine, so it will print 10</span></span><br><span class="line"></span><br><span class="line">N2=<span class="number">9</span>;</span><br><span class="line">System.out.printf(<span class="string">"%d\n"</span>,++N2);<span class="comment">//before printf is executed, N2 will be added up to 1, so it will print 10</span></span><br><span class="line">System.out.printf(<span class="string">"%d\n\n"</span>,N2);<span class="comment">//This line will still print 10</span></span><br></pre></td></tr></table></figure><p>The pre and post ++/– will make the result slightly different.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count, loop;</span><br><span class="line">count=<span class="number">9</span>;</span><br><span class="line">loop=++count;</span><br><span class="line"><span class="comment">//Then loop = 10, count=10</span></span><br><span class="line"></span><br><span class="line">count=<span class="number">9</span>;</span><br><span class="line">loop= count++;</span><br><span class="line"><span class="comment">//Then loop=9, count=10</span></span><br></pre></td></tr></table></figure><p>Try the following program by yourself:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> loop=<span class="number">8</span>, count=<span class="number">15</span>,Num;</span><br><span class="line"></span><br><span class="line">Num= +loop++;<span class="comment">//The old value of loop is assigned to Num</span></span><br><span class="line">System.out.printf(<span class="string">"Num=%d, loop=%d\n"</span>, Num, loop);<span class="comment">//num=8,loop=9</span></span><br><span class="line">Num= ++Num;</span><br><span class="line">System.out.printf(<span class="string">"Num=%d, loop=%d\n"</span>, Num, loop);<span class="comment">//num=9, loop=9</span></span><br><span class="line">Num=count++ + loop;</span><br><span class="line">System.out.printf(<span class="string">"Num=%d, loop=%d\n"</span>, Num, loop);<span class="comment">//num=24=15(old count)+9 , count=16, loop = 9</span></span><br><span class="line">Num= --count+ --loop;</span><br><span class="line">System.out.printf(<span class="string">"Num=%d, loop=%d\n"</span>, Num, loop);<span class="comment">//num=15+8=23, count=15, loop = 8</span></span><br><span class="line">Num= loop + -Num;</span><br><span class="line">System.out.printf(<span class="string">"Num=%d, loop=%d\n"</span>, Num, loop);<span class="comment">//num= 8-23=-15</span></span><br></pre></td></tr></table></figure></li><li><p>Operator precedence</p><ul><li>Plays role in mix of operators in a statement</li><li><strong>Precedence Rule</strong> applies for different operators</li><li><strong>Associative Rule</strong> applies for same operators</li></ul><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fvqq13hstwj20oe0g0tct.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fvqq1a2z34j20q40h0adr.jpg" alt=""></p></li></ul><h1 id="Control-Statements-in-Java"><a href="#Control-Statements-in-Java" class="headerlink" title="Control Statements in Java"></a>Control Statements in Java</h1><p>Computer algorithm can be described by using three types of control statement.</p><p>Sequence: executed one by one;</p><h2 id="Selection-executed-depending-on-condition"><a href="#Selection-executed-depending-on-condition" class="headerlink" title="Selection: executed depending on condition"></a>Selection: executed depending on condition</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//given an age, determine if the person is a teenager</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">Scanner getInput = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"Enter your age:"</span>);</span><br><span class="line"></span><br><span class="line">age = getInput.nextInt();</span><br><span class="line"><span class="comment">//teenager: age&gt;12 and age&lt;20</span></span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">12</span> &amp;&amp; age&lt;<span class="number">20</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"You are a teenager."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">Scanner getInput = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"Enter your score:"</span>);</span><br><span class="line">score = getInput.nextInt();</span><br><span class="line"><span class="comment">//given a score score find out if the student go A,B,C,D, of F Grade</span></span><br><span class="line"><span class="comment">//depending upon sliding scale of +90 A, 80-89 B, 70-79 C,60-69 D, &lt;59 F</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(score &gt;= <span class="number">90</span>)</span><br><span class="line">    System.out.println(<span class="string">"Your grade is A"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span>)</span><br><span class="line">    System.out.println(<span class="string">"Your grade is B"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span>)</span><br><span class="line">    System.out.println(<span class="string">"Your grade is C"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)</span><br><span class="line">    System.out.println(<span class="string">"Your grade is D"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.println(<span class="string">"Your grade is F"</span>);</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(ControllingExpression)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> constant <span class="number">1</span>:</span><br><span class="line">        statement;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant <span class="number">2</span>:</span><br><span class="line">        statement;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> constant n:</span><br><span class="line">        statement;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>All “switch” statements can be converted to “if…else…” statements.</strong></p><ul><li>Values for ‘case’: integer or character constants</li><li>Cannot use expressions or ranges</li><li>The order of the ‘case’ statements is unimportant</li><li>The default clause may occur first</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> firstN;</span><br><span class="line"><span class="keyword">float</span> secondN;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line">Scanner readInput = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"Type a number, operator, number -- Separate by a space: "</span>);</span><br><span class="line">firstN = readInput.nextInt();</span><br><span class="line">op = readInput.next().charAt(<span class="number">0</span>);</span><br><span class="line">secondN = readInput.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">'+'</span>)</span><br><span class="line">    System.out.printf(<span class="string">"%5.2f + %5.2f = %5.2f"</span>, firstN, secondN, firstN + secondN);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">'-'</span>)</span><br><span class="line">    System.out.printf(<span class="string">"%5.2f - %5.2f = %5.2f"</span>, firstN, secondN, firstN - secondN);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">'*'</span>)</span><br><span class="line">    System.out.printf(<span class="string">"%5.2f * %5.2f = %5.2f"</span>, firstN, secondN, firstN * secondN);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">'/'</span>)</span><br><span class="line">    System.out.printf(<span class="string">"%5.2f / %5.2f = %5.2f"</span>, firstN, secondN, firstN / secondN);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">'%'</span>)</span><br><span class="line">    System.out.printf(<span class="string">"%5.2f %% %5.2f = %d"</span>, firstN, secondN, (<span class="keyword">int</span>)firstN % (<span class="keyword">int</span>)secondN);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    System.out.printf(<span class="string">"Unknown operator"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//convert the above code into case statement</span></span><br><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>: System.out.print(<span class="string">"%5.2f + %5.2f = %5.2f"</span>, firstN, secondN, firstN + secondN);<span class="keyword">break</span>;<span class="comment">//"break" here is a must. If "break" is not used, then all the following command will be executed.</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>: System.out.print(<span class="string">"%5.2f - %5.2f = %5.2f"</span>, firstN, secondN, firstN - secondN);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>: System.out.print(<span class="string">"%5.2f * %5.2f = %5.2f"</span>, firstN, secondN, firstN * secondN);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>: System.out.print(<span class="string">"%5.2f / %5.2f = %5.2f"</span>, firstN, secondN, firstN / secondN);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'%'</span>: System.out.print(<span class="string">"%5.2f %% %5.2f = %d"</span>, firstN, secondN, (<span class="keyword">int</span>)firstN %(<span class="keyword">int</span>)secondN); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: System.out.printf(<span class="string">"Unknown operator"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(age)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">19</span>:System.out.println(<span class="string">"You are a teenager."</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: System.out.println(<span class="string">"You are not a teenager."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="?:"></a><strong>?:</strong></h3><p>Conditional operator: <strong>? :</strong></p><p>Usually it is used for <strong>assignment</strong>.</p><p><code>(expression1) ? expression2: expression3;</code></p><p>If expression1 is true, expression2 will be evaluated, or expression3 will be evaluated.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"Type two numbers -- Separated by a space: "</span>);</span><br><span class="line">firstN = readInput.nextInt();</span><br><span class="line">secondN = readInput.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstN&gt;secondN)</span><br><span class="line">    max=firstN;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    max=secondN;</span><br><span class="line">System.out.println(<span class="string">"The maximum of two numbers is: %5.2f"</span>,max);</span><br><span class="line"></span><br><span class="line"><span class="comment">//convert to ?:</span></span><br><span class="line">max= (firstN&gt;secondN)? firstN: secondN;</span><br></pre></td></tr></table></figure><h2 id="Repetition"><a href="#Repetition" class="headerlink" title="Repetition"></a>Repetition</h2><p>Loop structure is used to repeat a block of statements</p><p>Java provides two design of loop:</p><ul><li>controlled by an expression (counter)</li><li>controlled by a sentinel value (trip, signal value)</li></ul><h3 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a><strong>while</strong> loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Type1</span></span><br><span class="line"><span class="comment">//repeat while evaluated control-expression is not 0</span></span><br><span class="line">statement1;</span><br><span class="line"><span class="keyword">while</span>(control-expression)&#123;</span><br><span class="line">    statement(s);</span><br><span class="line">&#125;</span><br><span class="line">statementn;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sample</span></span><br><span class="line"><span class="keyword">int</span> loop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(loop++&lt;<span class="number">10</span>)</span><br><span class="line">    System.out.println(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure><h3 id="do-while-loop"><a href="#do-while-loop" class="headerlink" title="do while loop"></a><strong>do while</strong> loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Type2</span></span><br><span class="line"><span class="comment">//repeat while evaluated control-expression is not 0</span></span><br><span class="line">statement1(s);</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    statements;</span><br><span class="line">&#125;<span class="keyword">while</span>;</span><br><span class="line">statement3(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sample</span></span><br><span class="line"><span class="keyword">int</span> loopCount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> charResponse=<span class="string">""</span>;</span><br><span class="line">Scanner readInput = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Continue? Press n to stop:"</span>);</span><br><span class="line">    charResponse = readInput.next().charAt(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (charResponse!=<span class="string">"n"</span>);</span><br><span class="line"><span class="comment">//When the character entered is not "n", the loop will go on. Once you enter "n", the loop will stop.</span></span><br><span class="line">System.out.println(<span class="string">"Done"</span>)</span><br></pre></td></tr></table></figure><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a><strong>For</strong> loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Type3</span></span><br><span class="line"><span class="comment">//initialize expression1, repeat as expression2 is true and update expression3 each time.</span></span><br><span class="line"><span class="keyword">for</span>(InitializeExpression;</span><br><span class="line">    ControlExpression;</span><br><span class="line">    UpdateExpression)&#123;</span><br><span class="line">    BlockStatements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*Loops for a counter must contain three actions:</p><ul><li>Counter is initialized</li><li>Counter is compared</li><li>Counter is incremented</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> loop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(loop&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    loop++;</span><br><span class="line">    System.out.println(<span class="string">"%d"</span>, loop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//convert to for loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> loop=<span class="number">0</span>;loop&lt;<span class="number">10</span>;loop++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(loop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use derement operator to count down</li><li>use different counts</li><li>Count by characters instead of numbers</li><li>use any legal expressions for all three expressions</li><li>Leave any expression blank</li></ul><p><strong>Demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"|                  |"</span>);</span><br><span class="line">System.out.println(<span class="string">"|                  |"</span>);</span><br><span class="line">System.out.println(<span class="string">"|                  |"</span>);</span><br><span class="line">System.out.println(<span class="string">"|                  |"</span>);</span><br><span class="line">System.out.println(<span class="string">"|                  |"</span>);</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="comment">//use while loop to draw first line of a box - 20 characters in width and uses "-"</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> hSize=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> vSize=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(count++&lt; hSize)</span><br><span class="line">    System.out.print(<span class="string">"-"</span>);</span><br><span class="line">System.out.printf(<span class="string">"/n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(count2++&lt; vSize-<span class="number">2</span>)&#123;</span><br><span class="line">    System.out.print(<span class="string">"|"</span>);</span><br><span class="line">    count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(count++&lt; hSize-<span class="number">2</span>)</span><br><span class="line">        System.out.print(<span class="string">" "</span>);</span><br><span class="line">    System.out.print(<span class="string">"|"</span>);</span><br><span class="line">    System.out.printf(<span class="string">"/n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(count++&lt; hSize)</span><br><span class="line">    System.out.print(<span class="string">"-"</span>);</span><br><span class="line">System.out.printf(<span class="string">"/n"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Operators-Advanced-in-Java&quot;&gt;&lt;a href=&quot;#Operators-Advanced-in-Java&quot; class=&quot;headerlink&quot; title=&quot;Operators (Advanced) in Java&quot;&gt;&lt;/a&gt;Operators (Advanced) in Java&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compound assignment operators&lt;/p&gt;
&lt;p&gt;+=, -=, *=, /=, %=&lt;/p&gt;
&lt;p&gt;It is just the combination of operators and assignment operators.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s = s+2&lt;/code&gt; → &lt;code&gt;s += 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n1 = n1 * n2&lt;/code&gt; → &lt;code&gt;n1 *= n2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;… &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Increment/decrement operators&lt;/p&gt;
&lt;p&gt;++ and –&lt;/p&gt;
&lt;p&gt;If you want to increase by one or decrease by one, then you use “++” or “–”&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n += 1&lt;/code&gt; → &lt;code&gt;n++&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;n++ has assigned new value to n.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>强者恒强</title>
    <link href="https://github.com/JiamingXie/2018/09/28/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0180928/"/>
    <id>https://github.com/JiamingXie/2018/09/28/股市观察日记180928/</id>
    <published>2018-09-28T13:27:25.000Z</published>
    <updated>2018-09-29T00:20:00.307Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>沪指收报2821.35点，涨1.06%，成交额1254亿。深成指收报8401.09点，涨0.80%，成交额1378亿。创业板收报1411.34点，涨0.78%，成交额414亿。沪指全周上涨0.85%，深成指跌0.10%，创业板指涨0.02%。沪指本月上涨3.53%，创1月份来最大单月涨幅；深成指跌0.76%，创业板指跌1.66%。</p><p>28日，节前最后一个交易日，两市小幅高开，在北汽新能源板块的带动下，市场一度冲高，但此后大盘随即回落，次新股较昨日显著回暖，市场逐渐企稳，<strong>银行、保险</strong>逐渐活跃，指数稳步上行，午后两市稳步走强，<strong>有色板块</strong>的拉升刺激了主板指数的上行，而以银之杰为首的创业板人气股则带动了一波中小创，市场整体较昨日明显活跃，盘面上看，大盘个股涨多跌少，市场上呈现<strong>权重搭台，题材唱戏</strong>的走势，临近尾盘，指数高位盘整。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fvpl7cgim5j218s0j2jym.jpg" alt=""></p><a id="more"></a><p>经过这两周的上涨，大盘可能会进入横盘整理的阶段，震荡期间可以高抛低吸，或者借机入场。</p><p><strong>消息面</strong></p><ul><li><p>李克强：民营经济的管理者、经营者和生产者，都是中国特色社会主义的建设者</p><p>李克强总理9月28日上午在浙江台州主持召开座谈会。李克强说，民营经济和国有经济一样，都是社会主义市场经济的重要组成部分。民营经济的管理者、经营者和生产者，都是中国特色社会主义的建设者。我国的基本经济制度以及社会主义市场经济早已写入宪法。必须坚持“两个毫不动摇”，对各类所有制企业一视同仁，这一点绝不会有任何变化。</p></li><li><p>李克强：下一步要更大力度简政、减税、减费</p><p>李克强28日上午在浙江台州主持召开座谈会。听取企业家关于实体经济发展的意见建议后，李克强明确表示，下一步要更大力度简政、减税、减费。“简政”要继续深化“放管服”改革，降低制度性交易成本。“减税”要加快推进增值税税率“三档变两档”，研究降低增值税税率。“减费”要动真格地降低合规收费，坚决惩治乱收费，同时继续降低企业物流、电力等各类成本。</p></li><li><p>深交所三季报预披露时间表出炉，原来首家披露的公司益生股份已更改。现为炼石有色拔得头筹，将于10月9日披露。原定于10月10日披露的益生股份，现改为10月16日披露。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;沪指收报2821.35点，涨1.06%，成交额1254亿。深成指收报8401.09点，涨0.80%，成交额1378亿。创业板收报1411.34点，涨0.78%，成交额414亿。沪指全周上涨0.85%，深成指跌0.10%，创业板指涨0.02%。沪指本月上涨3.53%，创1月份来最大单月涨幅；深成指跌0.76%，创业板指跌1.66%。&lt;/p&gt;
&lt;p&gt;28日，节前最后一个交易日，两市小幅高开，在北汽新能源板块的带动下，市场一度冲高，但此后大盘随即回落，次新股较昨日显著回暖，市场逐渐企稳，&lt;strong&gt;银行、保险&lt;/strong&gt;逐渐活跃，指数稳步上行，午后两市稳步走强，&lt;strong&gt;有色板块&lt;/strong&gt;的拉升刺激了主板指数的上行，而以银之杰为首的创业板人气股则带动了一波中小创，市场整体较昨日明显活跃，盘面上看，大盘个股涨多跌少，市场上呈现&lt;strong&gt;权重搭台，题材唱戏&lt;/strong&gt;的走势，临近尾盘，指数高位盘整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fvpl7cgim5j218s0j2jym.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>节前小调</title>
    <link href="https://github.com/JiamingXie/2018/09/27/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0180927/"/>
    <id>https://github.com/JiamingXie/2018/09/27/股市观察日记180927/</id>
    <published>2018-09-27T15:53:23.000Z</published>
    <updated>2018-09-28T00:21:26.631Z</updated>
    
    <content type="html"><![CDATA[<p>盘面分析</p><p>截至收盘，沪指收报2791.77点，跌0.54%，成交额1234亿。深成指收报8334.75点，跌1.02%，成交额1626亿。创业板收报1400.36点，跌1.44%，成交额495亿。三大指数小幅低开，昨日活跃的权重股集体回调，而中小创也表现颓势，节前倒数第二个交易日，市场抛压较大，此后医药股拉升，带动指数一度走强，但两市依旧冲高回落，午后指数稳步走弱，有色钒板块的冲高一度带动有色金属板块的走强，但大盘依旧颓势，期指单边下行毫无反抗，临近尾盘，大盘持续走低。</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fvoxn9m1inj219u0kedlr.jpg" alt=""></p><p>早盘的时候的上突有点“作死”的意味，这种时候如果能下跌把空方力量释放干净反而是比较健康的。中午我们预测在2790点位会反弹，事实是反弹了，但是这一下太猛了，作死第二突彻底把今天的走势给突死了。本来的预期是砸下去拉上来收一个下影线，现在看来市场比我们预期要弱。</p><a id="more"></a><p>预计节前最后一个交易日还是以回调为主，节后调整过后还会有一波行情，但是具体的情况需要看国庆节外盘的情况和消息面来推断，接下来的震荡期间还是有入场机会。</p><p><strong>消息面</strong></p><ul><li><p><strong>富时罗素CEO：五到十年内会有2.5万亿美元增量资金流入中国证券市场</strong></p><p>富时罗素CEO麦思平说：“全球大概有25万亿美元的被动资金追踪富时罗素和MSCI两大指数公司。我们相信中国市场规模在未来能够占25万亿美元的10%以上，也就是大约2.5万亿美元的被动资金将有望在未来五到十年内流入A股市场。”（上证报）</p></li><li><p><strong><font color="red">习近平：党中央毫不动摇地支持民营经济发展</font></strong></p><font color="red">27日上午，习近平在辽宁忠旺集团考察。习近平强调，改革开放以来，党中央始终关心支持爱护民营企业。我们毫不动摇地发展公有制经济，毫不动摇地鼓励、支持、引导、保护民营经济发展。现在的很多改革举措都是围绕怎么进一步发展民营经济，对这一点民营企业要进一步增强信心。我们要为民营企业营造好的法治环境，进一步优化营商环境。党的路线方针政策是有益于、有利于民营企业发展的。民营企业也要进一步弘扬企业家精神、工匠精神，抓住主业，心无旁骛，力争做出更多的一流产品，发展一流的产业，为实现“两个一百年”目标作出新的贡献。（新华社）</font></li><li><p><strong><font color="red">习近平：怀疑、唱衰国企的思想和言论都是错误的</font></strong></p><font color="red">27日上午，习近平来到中国石油辽阳石化公司考察。他强调，我们的国有企业要继续做强做优做大，那种不要国有企业、搞小国有企业的说法、论调都是错误的、片面的。我们实行公有制为主体、多种所有制经济共同发展的基本经济制度，这一点毫不动摇。任何怀疑、唱衰国有企业的思想和言论都是错误的。坚持党对国有企业的领导，必须一以贯之；国有企业建立现代企业制度，也必须一以贯之。我们要沿着这条路笃定踏实地向前推进。（新华社）</font></li><li><p><strong>减税万亿红利将深度释放 新一轮减税举措细则将密集落地</strong></p><p>我国新个税红利释放在即，10月1日起，我国个税起征点将实现从3500元调至5000元，与此同时，3％、10％和20%三档税率级距也将扩大。业内指出，调高起征点和调整税率将释放减税效应，尤其是月薪两万以下收入群体的减税效应更加明显。不仅仅是个税，事实上，近期伴随新一轮减税举措细则的密集落地，我国减税政策掷地有声，全年万亿红利将深度释放。（经参）</p></li></ul><p><strong>特别鸣谢</strong></p><p><img src="http://ww1.sinaimg.cn/thumbnail/6a5a25c2gy1fvnejwuhbnj20io0is7a0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;盘面分析&lt;/p&gt;
&lt;p&gt;截至收盘，沪指收报2791.77点，跌0.54%，成交额1234亿。深成指收报8334.75点，跌1.02%，成交额1626亿。创业板收报1400.36点，跌1.44%，成交额495亿。三大指数小幅低开，昨日活跃的权重股集体回调，而中小创也表现颓势，节前倒数第二个交易日，市场抛压较大，此后医药股拉升，带动指数一度走强，但两市依旧冲高回落，午后指数稳步走弱，有色钒板块的冲高一度带动有色金属板块的走强，但大盘依旧颓势，期指单边下行毫无反抗，临近尾盘，大盘持续走低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6a5a25c2gy1fvoxn9m1inj219u0kedlr.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;早盘的时候的上突有点“作死”的意味，这种时候如果能下跌把空方力量释放干净反而是比较健康的。中午我们预测在2790点位会反弹，事实是反弹了，但是这一下太猛了，作死第二突彻底把今天的走势给突死了。本来的预期是砸下去拉上来收一个下影线，现在看来市场比我们预期要弱。&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Natural Language Processing - 使用sklearn进行文本特征提取</title>
    <link href="https://github.com/JiamingXie/2018/09/27/Natural%20Language%20Processing%20-%20Feature%20Extraction%20and%20Selection/"/>
    <id>https://github.com/JiamingXie/2018/09/27/Natural Language Processing - Feature Extraction and Selection/</id>
    <published>2018-09-27T02:58:34.000Z</published>
    <updated>2018-09-27T16:19:47.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分词-Word-Segmentation"><a href="#分词-Word-Segmentation" class="headerlink" title="分词 Word Segmentation"></a>分词 Word Segmentation</h1><p>jieba中文分词是一款完全开源的分词工具，是现在最主流的分词包之一。</p><p>分词阶段的预处理工作主要有两个，一个是分词，一个是去掉<em>停词</em>（stop words）。</p><p>stop_words是一个由停词组成的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stpwrdpath=<span class="string">' .txt'</span></span><br><span class="line"><span class="keyword">with</span> open(stpwrdpath, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    stopword= fp.read().decode(<span class="string">'utf-8'</span>) <span class="comment">#extract stop words</span></span><br><span class="line">stpwrdlst =stopword.splitlines()</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words_segment</span><span class="params">(input_string, stop_words=[])</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    The function use jieba to segment sentences and remove characters/words in stop_words.</span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">        input_string: string, the sentence to segment.</span></span><br><span class="line"><span class="string">        stop_words: list of strings that are going to be removed after word segmentation.</span></span><br><span class="line"><span class="string">    Output:</span></span><br><span class="line"><span class="string">        word_result = string, words joined by blank space after segmentation.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">seg_generator=jieba.cut(input_string, cut_all= <span class="keyword">False</span>)</span><br><span class="line">    word_result= <span class="string">" "</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> seg_generator:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stop_words_list:</span><br><span class="line">            word_result += (word + <span class="string">' '</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> word_result</span><br></pre></td></tr></table></figure><h1 id="文本转化为代表词频的特征向量-CountVectorize"><a href="#文本转化为代表词频的特征向量-CountVectorize" class="headerlink" title="文本转化为代表词频的特征向量 CountVectorize"></a>文本转化为代表词频的特征向量 CountVectorize</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line">vectorizer = CountVectorizer(stop_words=stpwrdlst)</span><br><span class="line">context_vector = vectorizer.fit_transform(listOfStirng) <span class="comment">#Learn the vocabulary dictionary and return term-document matrix.</span></span><br><span class="line"><span class="comment">#listOfString: The list containing all the sentences.</span></span><br><span class="line"></span><br><span class="line">print(vectorizer.get_feature_names()) <span class="comment">#get the list of feature words</span></span><br><span class="line">print(vectorizer.vocabulary_) <span class="comment">#get the dictionary of feature words and # of occurance</span></span><br><span class="line">print(vectorizer.toarray()) <span class="comment">#get the sparse=matrix of feature occurance</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> vectorizer.vocabulary_.items():</span><br><span class="line">    print(key,value) <span class="comment">#print feature words and # of occurance one by one</span></span><br></pre></td></tr></table></figure><p><strong>token_pattern的使用</strong></p><p>因为有些时候CountVectorizer会把一个专有名词也按照空格分开，有时并不符合需求。比如：World Economic Forum</p><p>可以通过token_pattern来自定义分隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nn=[</span><br><span class="line">    <span class="string">"People's Republic of China@中华人民共和国。"</span>,</span><br><span class="line">    <span class="string">"World Economic Forum@世界经济论坛"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="comment">#默认token_pattern=r"(?u)\b\w\w+\b"</span></span><br><span class="line">vectorizer=CountVectorizer(token_pattern=<span class="string">r"(?u)\b[^@]+\b"</span>)</span><br><span class="line">wordFrequencyMatrix = vectorizer.fit_transform(nn)</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span>  vectorizer.get_feature_names():</span><br><span class="line">    <span class="keyword">print</span> (f)</span><br></pre></td></tr></table></figure><h1 id="逆文档频率-TfidfVectorizer-TfidfTransformer"><a href="#逆文档频率-TfidfVectorizer-TfidfTransformer" class="headerlink" title="逆文档频率 TfidfVectorizer/TfidfTransformer"></a>逆文档频率 TfidfVectorizer/TfidfTransformer</h1><p><strong>Term Frequency (TF)</strong>:</p><p>$$tf(t,d)=\frac{f(t,d)+1}{||x||}$$</p><p>$f(t,d)$: frequency of term t in document d</p><p>||x||: (Euclidean distance) L2 norm of the count vector.</p><p><strong>Inverse Document Frequency (IDF)</strong>:</p><p>measures how rare or common a word is in a corpus.</p><p>$$idf(t,d)=log\frac{N}{1+|d\ \in\  D :\  t\  \in\ d|}$$</p><p>N: Total # of documents in the corpus</p><p>$d\ \in\  D :\  t\  \in\ d$  is the # of ducuments in the corpus that contain the term t.</p><p>Words like “I”, “will” contribute little to the classification of  texts. Thus, idf will penalize the importance of this kind of words.</p><p> 如果一类文本（比如说讲篮球赛的文本中过分频繁出现一些词如“篮球”“篮板”等词语）频繁出现一些对文本分类没有贡献的词，那么这类词的重要性会被IDF“惩罚”（penalized）。</p><hr><p>在分词以后就可以将文本转化为逆文档词频的特征向量（矩阵）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"></span><br><span class="line">listOfStirng=[<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>]</span><br><span class="line">vectorizer = CountVectorizer(stop_words=stpwrdlst)</span><br><span class="line">context_vector = vectorizer.fit_transform(listOfStirng)</span><br><span class="line"></span><br><span class="line">tfidf_transformer=TfidfTransformer()</span><br><span class="line">tfidf=tfidf_transformer.fit_transform(context_vector)<span class="comment">#calculate tf-idf for each word feature</span></span><br><span class="line">word=vectorizer.get_feature_names() <span class="comment">#name of different features</span></span><br><span class="line">weight=tfidf.toarray() <span class="comment">#the matrix of feature weight of different key words</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(weight)):<span class="comment">#print the keyword and feature weight in each text</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(word)):</span><br><span class="line">print(word[j], weight[i][j]) </span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line">listOfStirng=[<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>]</span><br><span class="line">tfidf=TfidfVectorizer(stop_words=stopwordlist)</span><br><span class="line">weight=tfidf.fit_transform(all_list).toarray()<span class="comment">#the matrix of feature weight of different key words</span></span><br><span class="line">word=tfidf.get_feature_names()<span class="comment">#name of different features</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(weight)):<span class="comment">#print the keyword and feature weight in each text</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(word)):</span><br><span class="line">print(word[j], weight[i][j])</span><br></pre></td></tr></table></figure><p>Thus, CountVectorizer + TfidfTransformer = TfidVectorizer.</p><h1 id="特征选择-Feature-Selection"><a href="#特征选择-Feature-Selection" class="headerlink" title="特征选择 Feature Selection"></a>特征选择 Feature Selection</h1><p><strong>Univariate feature selection</strong></p><ul><li>SelectKBest: removes all but the k highest scoring features</li><li>SelectPercentile: emoves all but a user-specified highest scoring percentage of features</li></ul><p>Chi-squared: <em>chi2(X,y)</em> computes chi-squared stats between each non-negative feature and class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> chi2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iris = load_iris()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, y = iris.data, iris.target</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X.shape</span><br><span class="line">(<span class="number">150</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_new = SelectKBest(chi2, k=<span class="number">2</span>).fit_transform(X, y)</span><br><span class="line"><span class="comment">#choose the best two features</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X_new.shape</span><br><span class="line">(<span class="number">150</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Chi2 can be changed to other objects:</p><ul><li>regression: f_regression</li><li>classification: chi2/f_classif</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分词-Word-Segmentation&quot;&gt;&lt;a href=&quot;#分词-Word-Segmentation&quot; class=&quot;headerlink&quot; title=&quot;分词 Word Segmentation&quot;&gt;&lt;/a&gt;分词 Word Segmentation&lt;/h1&gt;&lt;p&gt;jieba中文分词是一款完全开源的分词工具，是现在最主流的分词包之一。&lt;/p&gt;
&lt;p&gt;分词阶段的预处理工作主要有两个，一个是分词，一个是去掉&lt;em&gt;停词&lt;/em&gt;（stop words）。&lt;/p&gt;
&lt;p&gt;stop_words是一个由停词组成的列表。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stpwrdpath=&lt;span class=&quot;string&quot;&gt;&#39; .txt&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(stpwrdpath, &lt;span class=&quot;string&quot;&gt;&#39;rb&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; fp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stopword= fp.read().decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#extract stop words&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stpwrdlst =stopword.splitlines()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Data Mining" scheme="https://github.com/JiamingXie/categories/Data-Mining/"/>
    
    
      <category term="NLP" scheme="https://github.com/JiamingXie/tags/NLP/"/>
    
      <category term="Machine Learning" scheme="https://github.com/JiamingXie/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>重磅利好？MSCI拟将提高A股纳入因子</title>
    <link href="https://github.com/JiamingXie/2018/09/26/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0180926/"/>
    <id>https://github.com/JiamingXie/2018/09/26/股市观察日记180926/</id>
    <published>2018-09-26T15:56:27.000Z</published>
    <updated>2018-09-28T00:17:25.098Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>截至收盘，沪指收报2806.81点，涨0.92%，成交额1451亿。深成指收报8420.54点，涨0.80%，成交额1653亿。创业板收报1420.75点，涨1.06%，成交额466亿。早盘三大指数小幅高开，随后白马股表现强势，白酒、保险板块持续走强，但是中小创则依然萎靡，午后指数冲高回落，盘面上物流板块持续活跃，两市个股普涨，板块多数飘红，临近尾盘，大盘持续震荡。</p><p>从技术面上来看，今天的整体走势还是相当强劲的，比预期中要更强一些，但是还是冲高回落拉出了一根上影线。今天的这波涨势很可能是得益于MSCI考虑提高A股权重以及富时罗素考虑将A股纳入其指数体系。股票市场提前反应了这个预期。俗话说：“利好出尽是利空”。不管是不是纳入指数体系，预计明天都会有一定幅度的回调。纳入了就是小跌，没有纳入就是大跌。</p><p>节前两天的走势估计是小幅度回调加横盘震荡，节后继续震荡上行。</p><a id="more"></a><p><strong>消息面</strong></p><ul><li><strong>MSCI考虑将中国大盘A股纳入因子提高3倍</strong></li></ul><p>北京时间9月26日，国际大型指数公司MSCI发布新闻稿称，就进一步提高A股在MSCI指数中的权重展开咨询，MSCI表示，此次咨询是在建立在中国A股以5％的纳入因子首次加入MSCI中国指数及其相关综合性指数（如MSCI新兴市场指数）的成功实施基础上。</p><p>为此，MSCI进一步提出三项建议：</p><blockquote><p>将中国大盘A股的纳入因子从5％增加到20％，于2019年5月半年度指数评审和2019年8月季度指数评审这两个阶级分步实施;</p></blockquote><blockquote><p>从2019年5月半年度指数评审开始，将深交所创业板市场加入符合MSCI指数条件的证券交易所名单;</p></blockquote><blockquote><p>作为2020年5月半年度指数评审的一部分，将中国中盘A股以20%的纳入因子一步纳入MSCI中国指数。</p></blockquote><p>【MSCI：660亿美元增量资金将入市】MSCI亚太研究部主管谢征傧告诉记者，根据MSCI测算，以每5%的因子纳入A股，带来的资金大约是220亿。若此次咨询结果正面，则A股纳入的因子提升至4倍，基于5%的纳入因子带来的资金量测算，预计将有660亿美元的海外增量资金。（中国证券网）</p><p>同时，富时罗素将在北京时间9月27日凌晨正式宣布是否将中国A股纳入其指数体系，坊间普遍认为，从目前情势来看，A股被纳入的概率极大。</p><p><strong>特别鸣谢</strong></p><p><img src="http://ww1.sinaimg.cn/thumbnail/6a5a25c2gy1fvnejwuhbnj20io0is7a0.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截至收盘，沪指收报2806.81点，涨0.92%，成交额1451亿。深成指收报8420.54点，涨0.80%，成交额1653亿。创业板收报1420.75点，涨1.06%，成交额466亿。早盘三大指数小幅高开，随后白马股表现强势，白酒、保险板块持续走强，但是中小创则依然萎靡，午后指数冲高回落，盘面上物流板块持续活跃，两市个股普涨，板块多数飘红，临近尾盘，大盘持续震荡。&lt;/p&gt;
&lt;p&gt;从技术面上来看，今天的整体走势还是相当强劲的，比预期中要更强一些，但是还是冲高回落拉出了一根上影线。今天的这波涨势很可能是得益于MSCI考虑提高A股权重以及富时罗素考虑将A股纳入其指数体系。股票市场提前反应了这个预期。俗话说：“利好出尽是利空”。不管是不是纳入指数体系，预计明天都会有一定幅度的回调。纳入了就是小跌，没有纳入就是大跌。&lt;/p&gt;
&lt;p&gt;节前两天的走势估计是小幅度回调加横盘震荡，节后继续震荡上行。&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Operators - Assignment, Arithmetic, Relational, Logical</title>
    <link href="https://github.com/JiamingXie/2018/09/26/Operators%20-%20Assignment,%20Arithmetic,%20Relational,%20Logical/"/>
    <id>https://github.com/JiamingXie/2018/09/26/Operators - Assignment, Arithmetic, Relational, Logical/</id>
    <published>2018-09-26T12:52:38.000Z</published>
    <updated>2018-09-28T07:05:19.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h1><ul><li>Assigns the value from right operand to the left.</li><li>‘=’ operator is used as assignment operator</li><li>Variable = Expression<ul><li>A = B;</li><li>yourSalary= GetYourSalary();</li><li>int temp = 55;</li></ul></li></ul><a id="more"></a><h1 id="Arithmetic-Operator"><a href="#Arithmetic-Operator" class="headerlink" title="Arithmetic Operator"></a>Arithmetic Operator</h1><p><strong>Unary</strong>: require only one operand</p><p>+, -</p><p>++ Pre/Post Increment</p><p>– Pre/Post Decrement</p><p><strong>%</strong> Modulus/Remainder: e.g. 99%2=1</p><p><strong>Binary</strong>: require two operands</p><h1 id="Control-Statement"><a href="#Control-Statement" class="headerlink" title="Control Statement"></a>Control Statement</h1><p>Execute different code depending upon circumstances.</p><p><strong>“if”</strong> is one of the control statements.</p><p>There is also another one control statement-<strong>“if…else”, “if…else if….else”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstJavaClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> yourAge; <span class="comment">//implicit initializing</span></span><br><span class="line">        <span class="keyword">int</span> myAge = <span class="number">21</span>; <span class="comment">//explicit initializing</span></span><br><span class="line">        </span><br><span class="line">        Scanner readInput= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.printf(<span class="string">"How old are you?"</span>);</span><br><span class="line">        yourAge=readInput.nextInt();<span class="comment">// Assign the value of next input to readInput.</span></span><br><span class="line">        <span class="keyword">if</span> (yourAge &gt; <span class="number">50</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are golden.\n"</span>);</span><br><span class="line">        &#125;<span class="comment">//Even if it is just one line, you'd better add "&#123;&#125;" here.</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are not so golden.\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Relational-Operator"><a href="#Relational-Operator" class="headerlink" title="Relational Operator"></a>Relational Operator</h1><p>It defines the relation between operands.</p><table><thead><tr><th>Operator</th><th>Meaning</th></tr></thead><tbody><tr><td>==</td><td>Equal</td></tr><tr><td>!=</td><td>Not equal</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&gt;</td><td>more than</td></tr><tr><td>&lt;=</td><td>Less than or equal to</td></tr><tr><td>&gt;=</td><td>More than or equal to</td></tr></tbody></table><p>Every relational expression evaluates to a True or a False.</p><h1 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h1><p>used for multiple conditions in a statement.</p><table><thead><tr><th>Operator</th><th>Meaning</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>AND</td></tr><tr><td>&#124;&#124;</td><td>OR</td></tr><tr><td>!</td><td>NOT</td></tr></tbody></table><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><strong>Demo 1</strong></p><p>It is just the same as the previous one, but let me mention a little bit about this <strong>“args”</strong> in the last line.</p><p>“args”, which comes from <strong>main</strong>, is a command line argument.</p><p>Suppose you run the program from the command. You need to run the folloing code:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Helloworld <span class="number">50</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><p>You need to passing some value to it.</p><p>This 50 and 60 will come into the argument.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstJavaClass</span></span>&#123;</span><br><span class="line">    <span class="comment">//command line</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> yourAge; <span class="comment">//implicit initializing</span></span><br><span class="line">        <span class="keyword">int</span> myAge = <span class="number">21</span>; <span class="comment">//explicit initializing</span></span><br><span class="line">        </span><br><span class="line">        Scanner readInput= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.printf(<span class="string">"How old are you?"</span>);</span><br><span class="line">        yourAge=readInput.nextInt();<span class="comment">// Assign the value of next input to readInput.</span></span><br><span class="line">        <span class="keyword">if</span> (yourAge &gt; <span class="number">50</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are golden.\n"</span>);</span><br><span class="line">        &#125;<span class="comment">//Even if it is just one line, you'd better add "&#123;&#125;" here.</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are not so golden.\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"I told you so"</span>,args[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This args will contain 50 and 60. args[0]=50, args[1]=60.</p><p><strong>Demo 2</strong></p><p>Write a program which asks the user to enter their age and then you print the following messages, depending upon their age:</p><ul><li><p>If the age is less than 13, then say ‘you are a kid’;</p></li><li><p>if the age is greater than 19, then say ‘you are an adult’;</p></li><li><p>otherwise say ‘you are a teenager’.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeCheck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> yourAge; </span><br><span class="line">       </span><br><span class="line">        Scanner readInput= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.printf(<span class="string">"Please enter your age:"</span>);</span><br><span class="line">        yourAge=readInput.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//if (yourAge&gt;12 &amp;&amp; yourAge&lt;20)</span></span><br><span class="line">        <span class="comment">//System.out.printf("You are a teenager.");</span></span><br><span class="line">        <span class="keyword">if</span> (yourAge &lt;= <span class="number">13</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are a kid.\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (yourAge &gt; <span class="number">19</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are an adult.\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">"You are a teenager."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Assignment-Operator&quot;&gt;&lt;a href=&quot;#Assignment-Operator&quot; class=&quot;headerlink&quot; title=&quot;Assignment Operator&quot;&gt;&lt;/a&gt;Assignment Operator&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Assigns the value from right operand to the left.&lt;/li&gt;
&lt;li&gt;‘=’ operator is used as assignment operator&lt;/li&gt;
&lt;li&gt;Variable = Expression&lt;ul&gt;
&lt;li&gt;A = B;&lt;/li&gt;
&lt;li&gt;yourSalary= GetYourSalary();&lt;/li&gt;
&lt;li&gt;int temp = 55;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Data Types - Primitive Data Types, Usage</title>
    <link href="https://github.com/JiamingXie/2018/09/26/Data%20Types%20-%20Primitive%20Data%20Types,%20Usage/"/>
    <id>https://github.com/JiamingXie/2018/09/26/Data Types - Primitive Data Types, Usage/</id>
    <published>2018-09-26T11:02:28.000Z</published>
    <updated>2018-09-26T15:54:46.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Statements-Tokens"><a href="#Statements-Tokens" class="headerlink" title="Statements: Tokens"></a>Statements: Tokens</h1><p>Tokens are the smallest element parsed by the compiler.</p><a id="more"></a><h2 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h2><p>The reserved words of java language, like</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">final</span></span></span><br><span class="line"><span class="class">.</span></span><br><span class="line"><span class="class"><span class="title">while</span></span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">for</span></span></span><br><span class="line"><span class="class"><span class="title">if</span></span></span><br><span class="line"><span class="class"><span class="title">else</span></span></span><br></pre></td></tr></table></figure><p>You use this words for special purposes.</p><p><img src="http://ww1.sinaimg.cn/large/6a5a25c2gy1fvn5oqqvpej20t40960vj.jpg" alt=""></p><h2 id="Names-Identifiers"><a href="#Names-Identifiers" class="headerlink" title="Names (Identifiers)"></a>Names (Identifiers)</h2><p>Names are used to identify your program elements.</p><p>The variable and method names, like radius, pi, println, area, main…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>radius=<span class="number">2</span>; </span><br><span class="line">        <span class="keyword">double</span> area;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> pi=<span class="number">3.142</span>;</span><br><span class="line"></span><br><span class="line">        area=pi*radius*radius;</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">"The area is: "</span>);</span><br><span class="line">        System.out.println(area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Naming rules and conventions</strong></p><p><strong>Rules:</strong></p><ul><li>Any length</li><li>Must be within a letter</li><li>May contain digits and underscores</li><li>Case sensitive</li></ul><p><strong>Convention: (Not mandatory)</strong></p><ul><li>Generally variables are lower case characters and numbers</li><li>Avoid using underscores.</li><li>Capitalize the first letter of second word if needed: myHeight</li></ul><h2 id="Punctuation"><a href="#Punctuation" class="headerlink" title="Punctuation"></a>Punctuation</h2><h2 id="Character-constants"><a href="#Character-constants" class="headerlink" title="Character constants"></a>Character constants</h2><p>One character</p><ul><li>‘A’, ‘a’, ‘9’, ‘$’, ‘%’</li><li>One character defined character set</li><li>Must surround by single quotation mark</li><li>There should be only one character. ‘ab’, ‘abc’ are wrong.</li></ul><h2 id="String-constants"><a href="#String-constants" class="headerlink" title="String constants"></a>String constants</h2><h2 id="Numeric-constants"><a href="#Numeric-constants" class="headerlink" title="Numeric constants"></a>Numeric constants</h2><p>Contiguous sequence of digits</p><ul><li>Never contains a dollar, comma or space</li><li>May contain a decimal (dot)</li><li>e.g. 1023, 5.5</li></ul><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>Act upon operands</p><ul><li>Assignment Operators: =</li><li>Arithmetic Operators: +,-,*,/,%</li><li>Relational Operators: &lt;, &lt;=, ==, &gt;=, &gt; !=</li></ul><h2 id="White-space-Special-Symbol"><a href="#White-space-Special-Symbol" class="headerlink" title="White space, Special Symbol"></a>White space, Special Symbol</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; : , '' [] &#123;&#125; () = ... #</span><br></pre></td></tr></table></figure><h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><ul><li><p><strong>Memory</strong></p><ul><li>It is like rows of post box (slot) to store data</li><li>Number of slot is its address where one byte of data can be stored</li><li>Some logical data value can spam more than one slot</li><li><strong>When you define a variable, the computer creates a place for it.</strong></li></ul></li><li><p><strong>Data Type</strong></p><p>Type names a logical meaning to a <strong><em>span of memory</em></strong></p><font color="#4169E1">You should be able to answer “What is data type?” during an interview.</font><p>e.g. Int, float etc.</p><ul><li><p><strong>Byte</strong>: for small numbers and characters (-127 to 128)</p><p><em>\</em>Characters are also stored as number. So you can mix number and characters with Byte.*</p><p><strong><em>Hence it can alse be printed in number. It is only the matter that how you want to display it.</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> myChar=<span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">byte</span> myNumber= <span class="number">65</span>;</span><br><span class="line">String myString= <span class="string">"Hello How are you"</span>;</span><br><span class="line"><span class="comment">//You can assign different data type when print the input.</span></span><br><span class="line">System.out.printf(<span class="string">"The value is: %c \n"</span>, myChar);</span><br><span class="line">System.out.printf(<span class="string">"The myChar in number is: %d \n"</span>, myChar);</span><br><span class="line"><span class="comment">//Since myChar is a byte, it is stored in number and can be printed in number.</span></span><br><span class="line">System.out.printf(<span class="string">"The value is: %d \n"</span>, myNumber);</span><br><span class="line">System.out.printf(<span class="string">"%s\n"</span>, myString);</span><br></pre></td></tr></table></figure></li><li><p><strong>Character</strong>: To support Unicode</p></li><li><p><strong>Integer</strong>: Regular, short and long</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numberOfStars = <span class="number">10000000000000L</span>; <span class="comment">// an L is need at the end</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Real numbers</strong>: Floating and Double</p></li><li><p><strong>Boolean</strong>: True or False</p></li></ul></li><li><p><strong>Variable</strong></p><ul><li><strong><em>a place in memory to store a value of certain type that has a name</em></strong></li><li>Define a variable: Name and type</li><li>Optionally can initialize</li><li>e.g. radius, area, pi</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data_type variable_name;</span></span><br><span class="line"><span class="keyword">int</span> value1;</span><br><span class="line"><span class="keyword">int</span> value2, sum;</span><br></pre></td></tr></table></figure><ul><li>Initializing Variables<ul><li>Declarations create variables, but do not provide a value</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//variable_name=expression</span></span><br><span class="line">value1 = <span class="number">324</span>;</span><br><span class="line"><span class="keyword">int</span> value2=<span class="number">6</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>radius; </span><br><span class="line">        <span class="keyword">double</span> area;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> pi=<span class="number">3.142</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Scanner readInput = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       </span><br><span class="line">        System.out.print(<span class="string">"Enter the radius:"</span>);</span><br><span class="line">        radius = readInput.nextInt();</span><br><span class="line">        </span><br><span class="line">        area=pi*radius*radius;</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">"The area of radius"</span> + radius + <span class="string">"is: "</span> + area);</span><br><span class="line">        System.out.printf(<span class="string">"The area of radius %d is: %5.2f \nI am done."</span>,</span><br><span class="line">                         radius, area); </span><br><span class="line">        System.out.printf(<span class="string">"The percentage of radius to area in %% is %f"</span>, pi);</span><br><span class="line">        <span class="comment">//If you want to print a "%", you need to add another "%" before it.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">short</span> numberOfStudents=<span class="number">11</span>;</span><br><span class="line">        <span class="keyword">int</span> presidentsSalary=<span class="number">400000</span>;</span><br><span class="line">        <span class="keyword">long</span> numberOfStars=<span class="number">100000</span>; <span class="comment">//initialization</span></span><br><span class="line">        Scanner readInput= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.printf(<span class="string">"Number of stars in our University: %d \n\n"</span>, numberOfStars);</span><br><span class="line">        numberOfStars=<span class="number">1000000000000L</span>; <span class="comment">//reassign the variable</span></span><br><span class="line">        <span class="comment">//without L there is error</span></span><br><span class="line">        System.out.printf(<span class="string">"Number of stars in our Milkway: %d \n\n"</span>, numberOfStars);</span><br><span class="line">        <span class="comment">//reassign the variable</span></span><br><span class="line">        System.out.printf(<span class="string">"Please enter number of students and presidents salary: \n"</span>);</span><br><span class="line">        <span class="comment">//you just need to add a space between two inputs</span></span><br><span class="line">        numberOfStudents=readInput.nextShort();</span><br><span class="line">        presidentsSalary=readInput.nextInt();</span><br><span class="line">        System.out.printf(<span class="string">"Number of students:"</span> + numberOfStudents);</span><br><span class="line">        System.out.printf(<span class="string">"President's Salary + Bonus"</span> + presidentsSalary*<span class="number">1.25</span>);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Statements-Tokens&quot;&gt;&lt;a href=&quot;#Statements-Tokens&quot; class=&quot;headerlink&quot; title=&quot;Statements: Tokens&quot;&gt;&lt;/a&gt;Statements: Tokens&lt;/h1&gt;&lt;p&gt;Tokens are the smallest element parsed by the compiler.&lt;/p&gt;
    
    </summary>
    
      <category term="Java for Dummies" scheme="https://github.com/JiamingXie/categories/Java-for-Dummies/"/>
    
    
      <category term="coding" scheme="https://github.com/JiamingXie/tags/coding/"/>
    
      <category term="Java" scheme="https://github.com/JiamingXie/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>股市观察日记180925</title>
    <link href="https://github.com/JiamingXie/2018/09/25/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0180925/"/>
    <id>https://github.com/JiamingXie/2018/09/25/股市观察日记180925/</id>
    <published>2018-09-25T15:45:12.000Z</published>
    <updated>2018-09-26T15:54:54.056Z</updated>
    
    <content type="html"><![CDATA[<p><strong>盘面分析</strong></p><p>截止收盘，沪指报2781.14点，跌0.58%，深成指报8353.38点，跌0.66%；创指报1405.81点，跌0.38%。从盘面上看，农服、物流、赛马等板块涨幅居前，机场航运、房地产开发、银行等板块跌幅居前。从技术面上看是比较正常的回调。</p><p>今日上涨的股票多为周末有利好的板块：军工、农业、国产软件、电子元件等；油服板块上涨受益于周末原油期货大涨。</p><p>后续估计下跌空间不大，但是会回踩2750位置，震荡回调或是入场时机。</p><a id="more"></a><p><strong>消息面</strong></p><ul><li><p><strong>房地产行业大地震</strong></p><p>有媒体报道，监管部门向多省下发函件，要求住建厅对商品房预售许可进行深入研究论证；有传言称广东要取消房地产预售制度。</p><p>取消预售制度无疑是“去杠杆”中的一环，此政策将会降低了房企的流动性，从而导致利润下降。</p><p>所以昨天外盘中资地产集体暴跌：融信中国下跌10.71%，绿城中国下跌6.22%，碧桂园、华润置地、融创中国下跌超过4%，内资房地产股一天蒸发市值超过600亿港元。今天A股地产也领跌，早盘保利地产、万科A、招商蛇口、新城控股等跌幅超3%。</p><p>接下来大的趋势是维稳，稳定房价，所以房价很难会再有像之前一样疯狂的上涨。虽然地产股现在处于估值低位而且业绩不错，之后的投资价值还有待考证。</p></li><li><p>（吃瓜）<strong>刘强东性侵案或有新进展</strong></p><p>媒体又爆出了刘强东性侵案的新细节，包括女生的微信求助内容，里面声称被灌醉，并想自杀，且保留了床单。目前检方正在决定是否起诉。</p><p>受此消息影响，京东再次暴跌近8%，收24.51。</p><p>京东今年以来的股价走势十分疲弱，自今年1月创下50.68美元纪录最高价以来，京东股价跌幅超过50%。京东股价在涉嫌性侵犯事件曝光后（9月之后），跌幅超过20%，市值蒸发约88亿美元(对应约602亿人民币)。</p><p>拼多多昨收26.49，与京东的市值差距进一步缩小。</p></li><li><p><strong>外资加快布局A股市场</strong></p><p>去年前10个月，仅有富达中国债券一号私募基金一只基金发行。去年11月到今年9月，外资私募发行已达18只。</p><p>据中国基金报统计，截至9月25日，已有贝莱德、富达、瑞银、富敦、英仕曼、惠理、景顺纵横、路博迈、安本、施罗德、安中、元胜、桥水、毕盛等14家外资机构先后获得私募证券投资基金管理人资格，除桥水、毕盛尚未发行产品外，其余12家发行的外资私募基金产品数量达19只产品。</p><p>今年6 月 A 股正式纳入 MSCI 新兴市场指数，9 月27日又可能纳入富时罗素国际指数体系，将进一步对外资投资A股形成吸引力。</p><p>且现在A股估值处于历史低点，或是布局的好时机。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;盘面分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截止收盘，沪指报2781.14点，跌0.58%，深成指报8353.38点，跌0.66%；创指报1405.81点，跌0.38%。从盘面上看，农服、物流、赛马等板块涨幅居前，机场航运、房地产开发、银行等板块跌幅居前。从技术面上看是比较正常的回调。&lt;/p&gt;
&lt;p&gt;今日上涨的股票多为周末有利好的板块：军工、农业、国产软件、电子元件等；油服板块上涨受益于周末原油期货大涨。&lt;/p&gt;
&lt;p&gt;后续估计下跌空间不大，但是会回踩2750位置，震荡回调或是入场时机。&lt;/p&gt;
    
    </summary>
    
      <category term="股市观察日记" scheme="https://github.com/JiamingXie/categories/%E8%82%A1%E5%B8%82%E8%A7%82%E5%AF%9F%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Stock Analysis" scheme="https://github.com/JiamingXie/tags/Stock-Analysis/"/>
    
      <category term="Technical Analysis" scheme="https://github.com/JiamingXie/tags/Technical-Analysis/"/>
    
  </entry>
  
</feed>
